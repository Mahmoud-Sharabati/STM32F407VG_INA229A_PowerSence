
STM32F407VG_INA229_SPI_PowerSence_API.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037bc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003944  08003944  00013944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003998  08003998  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039a0  080039a0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039a0  080039a0  000139a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039a4  080039a4  000139a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080039a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
 10 .bss          000000dc  2000002c  2000002c  0002002c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000108  20000108  0002002c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b873  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001932  00000000  00000000  0002b8cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be0  00000000  00000000  0002d208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b18  00000000  00000000  0002dde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c2b  00000000  00000000  0002e900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c4d9  00000000  00000000  0004f52b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cac62  00000000  00000000  0005ba04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00126666  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003364  00000000  00000000  001266b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800392c 	.word	0x0800392c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	0800392c 	.word	0x0800392c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_frsub>:
 8000a04:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a08:	e002      	b.n	8000a10 <__addsf3>
 8000a0a:	bf00      	nop

08000a0c <__aeabi_fsub>:
 8000a0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a10 <__addsf3>:
 8000a10:	0042      	lsls	r2, r0, #1
 8000a12:	bf1f      	itttt	ne
 8000a14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a18:	ea92 0f03 	teqne	r2, r3
 8000a1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a24:	d06a      	beq.n	8000afc <__addsf3+0xec>
 8000a26:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a2e:	bfc1      	itttt	gt
 8000a30:	18d2      	addgt	r2, r2, r3
 8000a32:	4041      	eorgt	r1, r0
 8000a34:	4048      	eorgt	r0, r1
 8000a36:	4041      	eorgt	r1, r0
 8000a38:	bfb8      	it	lt
 8000a3a:	425b      	neglt	r3, r3
 8000a3c:	2b19      	cmp	r3, #25
 8000a3e:	bf88      	it	hi
 8000a40:	4770      	bxhi	lr
 8000a42:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a5e:	bf18      	it	ne
 8000a60:	4249      	negne	r1, r1
 8000a62:	ea92 0f03 	teq	r2, r3
 8000a66:	d03f      	beq.n	8000ae8 <__addsf3+0xd8>
 8000a68:	f1a2 0201 	sub.w	r2, r2, #1
 8000a6c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a70:	eb10 000c 	adds.w	r0, r0, ip
 8000a74:	f1c3 0320 	rsb	r3, r3, #32
 8000a78:	fa01 f103 	lsl.w	r1, r1, r3
 8000a7c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a80:	d502      	bpl.n	8000a88 <__addsf3+0x78>
 8000a82:	4249      	negs	r1, r1
 8000a84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a8c:	d313      	bcc.n	8000ab6 <__addsf3+0xa6>
 8000a8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a92:	d306      	bcc.n	8000aa2 <__addsf3+0x92>
 8000a94:	0840      	lsrs	r0, r0, #1
 8000a96:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a9a:	f102 0201 	add.w	r2, r2, #1
 8000a9e:	2afe      	cmp	r2, #254	; 0xfe
 8000aa0:	d251      	bcs.n	8000b46 <__addsf3+0x136>
 8000aa2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aa6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aaa:	bf08      	it	eq
 8000aac:	f020 0001 	biceq.w	r0, r0, #1
 8000ab0:	ea40 0003 	orr.w	r0, r0, r3
 8000ab4:	4770      	bx	lr
 8000ab6:	0049      	lsls	r1, r1, #1
 8000ab8:	eb40 0000 	adc.w	r0, r0, r0
 8000abc:	3a01      	subs	r2, #1
 8000abe:	bf28      	it	cs
 8000ac0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ac4:	d2ed      	bcs.n	8000aa2 <__addsf3+0x92>
 8000ac6:	fab0 fc80 	clz	ip, r0
 8000aca:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ace:	ebb2 020c 	subs.w	r2, r2, ip
 8000ad2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ad6:	bfaa      	itet	ge
 8000ad8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000adc:	4252      	neglt	r2, r2
 8000ade:	4318      	orrge	r0, r3
 8000ae0:	bfbc      	itt	lt
 8000ae2:	40d0      	lsrlt	r0, r2
 8000ae4:	4318      	orrlt	r0, r3
 8000ae6:	4770      	bx	lr
 8000ae8:	f092 0f00 	teq	r2, #0
 8000aec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000af0:	bf06      	itte	eq
 8000af2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000af6:	3201      	addeq	r2, #1
 8000af8:	3b01      	subne	r3, #1
 8000afa:	e7b5      	b.n	8000a68 <__addsf3+0x58>
 8000afc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b04:	bf18      	it	ne
 8000b06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0a:	d021      	beq.n	8000b50 <__addsf3+0x140>
 8000b0c:	ea92 0f03 	teq	r2, r3
 8000b10:	d004      	beq.n	8000b1c <__addsf3+0x10c>
 8000b12:	f092 0f00 	teq	r2, #0
 8000b16:	bf08      	it	eq
 8000b18:	4608      	moveq	r0, r1
 8000b1a:	4770      	bx	lr
 8000b1c:	ea90 0f01 	teq	r0, r1
 8000b20:	bf1c      	itt	ne
 8000b22:	2000      	movne	r0, #0
 8000b24:	4770      	bxne	lr
 8000b26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b2a:	d104      	bne.n	8000b36 <__addsf3+0x126>
 8000b2c:	0040      	lsls	r0, r0, #1
 8000b2e:	bf28      	it	cs
 8000b30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b34:	4770      	bx	lr
 8000b36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b3a:	bf3c      	itt	cc
 8000b3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b40:	4770      	bxcc	lr
 8000b42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4e:	4770      	bx	lr
 8000b50:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b54:	bf16      	itet	ne
 8000b56:	4608      	movne	r0, r1
 8000b58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b5c:	4601      	movne	r1, r0
 8000b5e:	0242      	lsls	r2, r0, #9
 8000b60:	bf06      	itte	eq
 8000b62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b66:	ea90 0f01 	teqeq	r0, r1
 8000b6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_ui2f>:
 8000b70:	f04f 0300 	mov.w	r3, #0
 8000b74:	e004      	b.n	8000b80 <__aeabi_i2f+0x8>
 8000b76:	bf00      	nop

08000b78 <__aeabi_i2f>:
 8000b78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b7c:	bf48      	it	mi
 8000b7e:	4240      	negmi	r0, r0
 8000b80:	ea5f 0c00 	movs.w	ip, r0
 8000b84:	bf08      	it	eq
 8000b86:	4770      	bxeq	lr
 8000b88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b8c:	4601      	mov	r1, r0
 8000b8e:	f04f 0000 	mov.w	r0, #0
 8000b92:	e01c      	b.n	8000bce <__aeabi_l2f+0x2a>

08000b94 <__aeabi_ul2f>:
 8000b94:	ea50 0201 	orrs.w	r2, r0, r1
 8000b98:	bf08      	it	eq
 8000b9a:	4770      	bxeq	lr
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	e00a      	b.n	8000bb8 <__aeabi_l2f+0x14>
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_l2f>:
 8000ba4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bb0:	d502      	bpl.n	8000bb8 <__aeabi_l2f+0x14>
 8000bb2:	4240      	negs	r0, r0
 8000bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb8:	ea5f 0c01 	movs.w	ip, r1
 8000bbc:	bf02      	ittt	eq
 8000bbe:	4684      	moveq	ip, r0
 8000bc0:	4601      	moveq	r1, r0
 8000bc2:	2000      	moveq	r0, #0
 8000bc4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bc8:	bf08      	it	eq
 8000bca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bd2:	fabc f28c 	clz	r2, ip
 8000bd6:	3a08      	subs	r2, #8
 8000bd8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bdc:	db10      	blt.n	8000c00 <__aeabi_l2f+0x5c>
 8000bde:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be2:	4463      	add	r3, ip
 8000be4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000be8:	f1c2 0220 	rsb	r2, r2, #32
 8000bec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bf0:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf4:	eb43 0002 	adc.w	r0, r3, r2
 8000bf8:	bf08      	it	eq
 8000bfa:	f020 0001 	biceq.w	r0, r0, #1
 8000bfe:	4770      	bx	lr
 8000c00:	f102 0220 	add.w	r2, r2, #32
 8000c04:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c08:	f1c2 0220 	rsb	r2, r2, #32
 8000c0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c10:	fa21 f202 	lsr.w	r2, r1, r2
 8000c14:	eb43 0002 	adc.w	r0, r3, r2
 8000c18:	bf08      	it	eq
 8000c1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b974 	b.w	8000f20 <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9d08      	ldr	r5, [sp, #32]
 8000c56:	4604      	mov	r4, r0
 8000c58:	468e      	mov	lr, r1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d14d      	bne.n	8000cfa <__udivmoddi4+0xaa>
 8000c5e:	428a      	cmp	r2, r1
 8000c60:	4694      	mov	ip, r2
 8000c62:	d969      	bls.n	8000d38 <__udivmoddi4+0xe8>
 8000c64:	fab2 f282 	clz	r2, r2
 8000c68:	b152      	cbz	r2, 8000c80 <__udivmoddi4+0x30>
 8000c6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6e:	f1c2 0120 	rsb	r1, r2, #32
 8000c72:	fa20 f101 	lsr.w	r1, r0, r1
 8000c76:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c7a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c7e:	4094      	lsls	r4, r2
 8000c80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c84:	0c21      	lsrs	r1, r4, #16
 8000c86:	fbbe f6f8 	udiv	r6, lr, r8
 8000c8a:	fa1f f78c 	uxth.w	r7, ip
 8000c8e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c92:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c96:	fb06 f107 	mul.w	r1, r6, r7
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	d90a      	bls.n	8000cb4 <__udivmoddi4+0x64>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ca6:	f080 811f 	bcs.w	8000ee8 <__udivmoddi4+0x298>
 8000caa:	4299      	cmp	r1, r3
 8000cac:	f240 811c 	bls.w	8000ee8 <__udivmoddi4+0x298>
 8000cb0:	3e02      	subs	r6, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1a5b      	subs	r3, r3, r1
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc4:	fb00 f707 	mul.w	r7, r0, r7
 8000cc8:	42a7      	cmp	r7, r4
 8000cca:	d90a      	bls.n	8000ce2 <__udivmoddi4+0x92>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd4:	f080 810a 	bcs.w	8000eec <__udivmoddi4+0x29c>
 8000cd8:	42a7      	cmp	r7, r4
 8000cda:	f240 8107 	bls.w	8000eec <__udivmoddi4+0x29c>
 8000cde:	4464      	add	r4, ip
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce6:	1be4      	subs	r4, r4, r7
 8000ce8:	2600      	movs	r6, #0
 8000cea:	b11d      	cbz	r5, 8000cf4 <__udivmoddi4+0xa4>
 8000cec:	40d4      	lsrs	r4, r2
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d909      	bls.n	8000d12 <__udivmoddi4+0xc2>
 8000cfe:	2d00      	cmp	r5, #0
 8000d00:	f000 80ef 	beq.w	8000ee2 <__udivmoddi4+0x292>
 8000d04:	2600      	movs	r6, #0
 8000d06:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	fab3 f683 	clz	r6, r3
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d14a      	bne.n	8000db0 <__udivmoddi4+0x160>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d302      	bcc.n	8000d24 <__udivmoddi4+0xd4>
 8000d1e:	4282      	cmp	r2, r0
 8000d20:	f200 80f9 	bhi.w	8000f16 <__udivmoddi4+0x2c6>
 8000d24:	1a84      	subs	r4, r0, r2
 8000d26:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	469e      	mov	lr, r3
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	d0e0      	beq.n	8000cf4 <__udivmoddi4+0xa4>
 8000d32:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d36:	e7dd      	b.n	8000cf4 <__udivmoddi4+0xa4>
 8000d38:	b902      	cbnz	r2, 8000d3c <__udivmoddi4+0xec>
 8000d3a:	deff      	udf	#255	; 0xff
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	2a00      	cmp	r2, #0
 8000d42:	f040 8092 	bne.w	8000e6a <__udivmoddi4+0x21a>
 8000d46:	eba1 010c 	sub.w	r1, r1, ip
 8000d4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	2601      	movs	r6, #1
 8000d54:	0c20      	lsrs	r0, r4, #16
 8000d56:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d5a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d5e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d62:	fb0e f003 	mul.w	r0, lr, r3
 8000d66:	4288      	cmp	r0, r1
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x12c>
 8000d6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x12a>
 8000d74:	4288      	cmp	r0, r1
 8000d76:	f200 80cb 	bhi.w	8000f10 <__udivmoddi4+0x2c0>
 8000d7a:	4643      	mov	r3, r8
 8000d7c:	1a09      	subs	r1, r1, r0
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d84:	fb07 1110 	mls	r1, r7, r0, r1
 8000d88:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x156>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x154>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f200 80bb 	bhi.w	8000f1a <__udivmoddi4+0x2ca>
 8000da4:	4608      	mov	r0, r1
 8000da6:	eba4 040e 	sub.w	r4, r4, lr
 8000daa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dae:	e79c      	b.n	8000cea <__udivmoddi4+0x9a>
 8000db0:	f1c6 0720 	rsb	r7, r6, #32
 8000db4:	40b3      	lsls	r3, r6
 8000db6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dbe:	fa20 f407 	lsr.w	r4, r0, r7
 8000dc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000dc6:	431c      	orrs	r4, r3
 8000dc8:	40f9      	lsrs	r1, r7
 8000dca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dce:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dd6:	0c20      	lsrs	r0, r4, #16
 8000dd8:	fa1f fe8c 	uxth.w	lr, ip
 8000ddc:	fb09 1118 	mls	r1, r9, r8, r1
 8000de0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de4:	fb08 f00e 	mul.w	r0, r8, lr
 8000de8:	4288      	cmp	r0, r1
 8000dea:	fa02 f206 	lsl.w	r2, r2, r6
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b8>
 8000df0:	eb1c 0101 	adds.w	r1, ip, r1
 8000df4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df8:	f080 8088 	bcs.w	8000f0c <__udivmoddi4+0x2bc>
 8000dfc:	4288      	cmp	r0, r1
 8000dfe:	f240 8085 	bls.w	8000f0c <__udivmoddi4+0x2bc>
 8000e02:	f1a8 0802 	sub.w	r8, r8, #2
 8000e06:	4461      	add	r1, ip
 8000e08:	1a09      	subs	r1, r1, r0
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e10:	fb09 1110 	mls	r1, r9, r0, r1
 8000e14:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e1c:	458e      	cmp	lr, r1
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1e2>
 8000e20:	eb1c 0101 	adds.w	r1, ip, r1
 8000e24:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e28:	d26c      	bcs.n	8000f04 <__udivmoddi4+0x2b4>
 8000e2a:	458e      	cmp	lr, r1
 8000e2c:	d96a      	bls.n	8000f04 <__udivmoddi4+0x2b4>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4461      	add	r1, ip
 8000e32:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e36:	fba0 9402 	umull	r9, r4, r0, r2
 8000e3a:	eba1 010e 	sub.w	r1, r1, lr
 8000e3e:	42a1      	cmp	r1, r4
 8000e40:	46c8      	mov	r8, r9
 8000e42:	46a6      	mov	lr, r4
 8000e44:	d356      	bcc.n	8000ef4 <__udivmoddi4+0x2a4>
 8000e46:	d053      	beq.n	8000ef0 <__udivmoddi4+0x2a0>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x212>
 8000e4a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e4e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e52:	fa01 f707 	lsl.w	r7, r1, r7
 8000e56:	fa22 f306 	lsr.w	r3, r2, r6
 8000e5a:	40f1      	lsrs	r1, r6
 8000e5c:	431f      	orrs	r7, r3
 8000e5e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	f1c2 0320 	rsb	r3, r2, #32
 8000e6e:	40d8      	lsrs	r0, r3
 8000e70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e74:	fa21 f303 	lsr.w	r3, r1, r3
 8000e78:	4091      	lsls	r1, r2
 8000e7a:	4301      	orrs	r1, r0
 8000e7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e88:	fb07 3610 	mls	r6, r7, r0, r3
 8000e8c:	0c0b      	lsrs	r3, r1, #16
 8000e8e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e92:	fb00 f60e 	mul.w	r6, r0, lr
 8000e96:	429e      	cmp	r6, r3
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x260>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ea6:	d22f      	bcs.n	8000f08 <__udivmoddi4+0x2b8>
 8000ea8:	429e      	cmp	r6, r3
 8000eaa:	d92d      	bls.n	8000f08 <__udivmoddi4+0x2b8>
 8000eac:	3802      	subs	r0, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	1b9b      	subs	r3, r3, r6
 8000eb2:	b289      	uxth	r1, r1
 8000eb4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb8:	fb07 3316 	mls	r3, r7, r6, r3
 8000ebc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec0:	fb06 f30e 	mul.w	r3, r6, lr
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x28a>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ed0:	d216      	bcs.n	8000f00 <__udivmoddi4+0x2b0>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d914      	bls.n	8000f00 <__udivmoddi4+0x2b0>
 8000ed6:	3e02      	subs	r6, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	1ac9      	subs	r1, r1, r3
 8000edc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee0:	e738      	b.n	8000d54 <__udivmoddi4+0x104>
 8000ee2:	462e      	mov	r6, r5
 8000ee4:	4628      	mov	r0, r5
 8000ee6:	e705      	b.n	8000cf4 <__udivmoddi4+0xa4>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	e6e3      	b.n	8000cb4 <__udivmoddi4+0x64>
 8000eec:	4618      	mov	r0, r3
 8000eee:	e6f8      	b.n	8000ce2 <__udivmoddi4+0x92>
 8000ef0:	454b      	cmp	r3, r9
 8000ef2:	d2a9      	bcs.n	8000e48 <__udivmoddi4+0x1f8>
 8000ef4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000efc:	3801      	subs	r0, #1
 8000efe:	e7a3      	b.n	8000e48 <__udivmoddi4+0x1f8>
 8000f00:	4646      	mov	r6, r8
 8000f02:	e7ea      	b.n	8000eda <__udivmoddi4+0x28a>
 8000f04:	4620      	mov	r0, r4
 8000f06:	e794      	b.n	8000e32 <__udivmoddi4+0x1e2>
 8000f08:	4640      	mov	r0, r8
 8000f0a:	e7d1      	b.n	8000eb0 <__udivmoddi4+0x260>
 8000f0c:	46d0      	mov	r8, sl
 8000f0e:	e77b      	b.n	8000e08 <__udivmoddi4+0x1b8>
 8000f10:	3b02      	subs	r3, #2
 8000f12:	4461      	add	r1, ip
 8000f14:	e732      	b.n	8000d7c <__udivmoddi4+0x12c>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e709      	b.n	8000d2e <__udivmoddi4+0xde>
 8000f1a:	4464      	add	r4, ip
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	e742      	b.n	8000da6 <__udivmoddi4+0x156>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <INA229_config>:
/*
 *  ======== INA229_config ========
 * Configure device with current settings.
 */

void INA229_config(INA229_Handle sensor) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    //Initialize the bus containing this sensor
//    mcu_spiInit(sensor->busId);

    //Write sensor Configuration Registers
    INA229_writeReg(sensor, INA229_config_register, sensor->configRegister);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	2100      	movs	r1, #0
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 f84b 	bl	8000fd0 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_adc_config_register, sensor->adcConfigRegister);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	885b      	ldrh	r3, [r3, #2]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	2101      	movs	r1, #1
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 f844 	bl	8000fd0 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_shunt_cal_register, sensor->shuntCalRegister);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	889b      	ldrh	r3, [r3, #4]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	2102      	movs	r1, #2
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 f83d 	bl	8000fd0 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_shunt_tempco_register, sensor->shuntTempcoRegister);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	88db      	ldrh	r3, [r3, #6]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	2103      	movs	r1, #3
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f836 	bl	8000fd0 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_diag_alrt_register, sensor->diagAlrtRegister);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	891b      	ldrh	r3, [r3, #8]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	210b      	movs	r1, #11
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f82f 	bl	8000fd0 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_sovl_register, sensor->sovlRegister);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	895b      	ldrh	r3, [r3, #10]
 8000f76:	461a      	mov	r2, r3
 8000f78:	210c      	movs	r1, #12
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f828 	bl	8000fd0 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_suvl_register, sensor->suvlRegister);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	899b      	ldrh	r3, [r3, #12]
 8000f84:	461a      	mov	r2, r3
 8000f86:	210d      	movs	r1, #13
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f821 	bl	8000fd0 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_bovl_register, sensor->bovlRegister);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	89db      	ldrh	r3, [r3, #14]
 8000f92:	461a      	mov	r2, r3
 8000f94:	210e      	movs	r1, #14
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f000 f81a 	bl	8000fd0 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_buvl_register, sensor->buvlRegister);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	8a1b      	ldrh	r3, [r3, #16]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 f813 	bl	8000fd0 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_temp_limit_register, sensor->tempLimitRegister);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	8a5b      	ldrh	r3, [r3, #18]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	2110      	movs	r1, #16
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f80c 	bl	8000fd0 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_pwr_limit_register, sensor->pwrLimitRegister);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	8a9b      	ldrh	r3, [r3, #20]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	2111      	movs	r1, #17
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 f805 	bl	8000fd0 <INA229_writeReg>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <INA229_writeReg>:
/*
 *  ======== INA229_writeReg ========
 * Write register
 */
void INA229_writeReg(INA229_Handle sensor, uint8_t regAddr, uint16_t value)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70fb      	strb	r3, [r7, #3]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	803b      	strh	r3, [r7, #0]
    uint8_t txBuf[3] = {0}; //All writable registers are 2 bytes
 8000fe0:	4b20      	ldr	r3, [pc, #128]	; (8001064 <INA229_writeReg+0x94>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	81bb      	strh	r3, [r7, #12]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73bb      	strb	r3, [r7, #14]
//    uint8_t rxBuf[3] = {0};

    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	733b      	strb	r3, [r7, #12]
    txBuf[1] = (value >> 8);
 8000ff2:	883b      	ldrh	r3, [r7, #0]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	737b      	strb	r3, [r7, #13]
    txBuf[2] = (value & 0xFF);
 8000ffc:	883b      	ldrh	r3, [r7, #0]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	73bb      	strb	r3, [r7, #14]

//    uint8_t size = sizeof(txBuf);

    /* Select the INA229: Chip Select low */
	INA229_CS_LOW();
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001008:	4817      	ldr	r0, [pc, #92]	; (8001068 <INA229_writeReg+0x98>)
 800100a:	f001 f88f 	bl	800212c <HAL_GPIO_WritePin>
    while (INA229_SPI->State == HAL_SPI_STATE_RESET) {
 800100e:	e002      	b.n	8001016 <INA229_writeReg+0x46>
        HAL_Delay(1);
 8001010:	2001      	movs	r0, #1
 8001012:	f000 fde5 	bl	8001be0 <HAL_Delay>
    while (INA229_SPI->State == HAL_SPI_STATE_RESET) {
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <INA229_writeReg+0x9c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0f5      	beq.n	8001010 <INA229_writeReg+0x40>
    }
    if (HAL_SPI_Transmit(INA229_SPI, (uint8_t*)txBuf, (uint16_t)sizeof(txBuf), 200) != HAL_OK) {
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <INA229_writeReg+0x9c>)
 8001026:	6818      	ldr	r0, [r3, #0]
 8001028:	f107 010c 	add.w	r1, r7, #12
 800102c:	23c8      	movs	r3, #200	; 0xc8
 800102e:	2203      	movs	r2, #3
 8001030:	f001 fd5d 	bl	8002aee <HAL_SPI_Transmit>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <INA229_writeReg+0x6e>
        Error_Handler();
 800103a:	f000 fc41 	bl	80018c0 <Error_Handler>
    }

    /* Deselect the INA229: Chip Select high */
    INA229_CS_HIGH();
 800103e:	2201      	movs	r2, #1
 8001040:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001044:	4808      	ldr	r0, [pc, #32]	; (8001068 <INA229_writeReg+0x98>)
 8001046:	f001 f871 	bl	800212c <HAL_GPIO_WritePin>

    //check for change in ADCRANGE
    if(regAddr == INA229_config_register)
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d105      	bne.n	800105c <INA229_writeReg+0x8c>
    {
        sensor->adcrange = value & INA229_config_register_adcrange_4096mV;
 8001050:	883b      	ldrh	r3, [r7, #0]
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	b29a      	uxth	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	82da      	strh	r2, [r3, #22]
    }
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	08003944 	.word	0x08003944
 8001068:	40021000 	.word	0x40021000
 800106c:	20000048 	.word	0x20000048

08001070 <INA229_readReg>:
/*
 *  ======== INA229_readReg ========
 *  Read register
 */
uint64_t INA229_readReg(INA229_Handle sensor, uint8_t regAddr)
{
 8001070:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001074:	b088      	sub	sp, #32
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	460b      	mov	r3, r1
 800107c:	70fb      	strb	r3, [r7, #3]
    while (INA229_SPI->State != HAL_SPI_STATE_READY)
 800107e:	e002      	b.n	8001086 <INA229_readReg+0x16>
    {
        HAL_Delay(1);
 8001080:	2001      	movs	r0, #1
 8001082:	f000 fdad 	bl	8001be0 <HAL_Delay>
    while (INA229_SPI->State != HAL_SPI_STATE_READY)
 8001086:	4b34      	ldr	r3, [pc, #208]	; (8001158 <INA229_readReg+0xe8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b01      	cmp	r3, #1
 8001092:	d1f5      	bne.n	8001080 <INA229_readReg+0x10>
    }
    uint64_t value;

    uint8_t txBuf[1] = {0};
 8001094:	2300      	movs	r3, #0
 8001096:	753b      	strb	r3, [r7, #20]
    uint8_t rxBuf[6] = {0}; //max buffer size
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	2300      	movs	r3, #0
 800109e:	823b      	strh	r3, [r7, #16]

    txBuf[0] = (regAddr << 2 ) | 0x01; //Address + read bit (ending in 1)
 80010a0:	78fb      	ldrb	r3, [r7, #3]
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	753b      	strb	r3, [r7, #20]

    //Read register
	/* Pull CS pin Low */
	INA229_CS_LOW();
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b6:	4829      	ldr	r0, [pc, #164]	; (800115c <INA229_readReg+0xec>)
 80010b8:	f001 f838 	bl	800212c <HAL_GPIO_WritePin>

//	while (INA229_SPI->State == HAL_SPI_STATE_RESET) {
//        HAL_Delay(1);
//    }

	HAL_SPI_Transmit(INA229_SPI, txBuf, 1, HAL_MAX_DELAY);
 80010bc:	4b26      	ldr	r3, [pc, #152]	; (8001158 <INA229_readReg+0xe8>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	f107 0114 	add.w	r1, r7, #20
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	2201      	movs	r2, #1
 80010ca:	f001 fd10 	bl	8002aee <HAL_SPI_Transmit>
	HAL_SPI_Receive (INA229_SPI, (uint8_t*)rxBuf, sizeof(rxBuf), HAL_MAX_DELAY);
 80010ce:	4b22      	ldr	r3, [pc, #136]	; (8001158 <INA229_readReg+0xe8>)
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	f107 010c 	add.w	r1, r7, #12
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	2206      	movs	r2, #6
 80010dc:	f001 fe43 	bl	8002d66 <HAL_SPI_Receive>
//        HAL_Delay(1);
//    };


	/* Deselect the INA229: Chip Select high */
    INA229_CS_HIGH();
 80010e0:	2201      	movs	r2, #1
 80010e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e6:	481d      	ldr	r0, [pc, #116]	; (800115c <INA229_readReg+0xec>)
 80010e8:	f001 f820 	bl	800212c <HAL_GPIO_WritePin>

    //Combine bytes
    value = 0; // initialize to 0, toss rxBuf[0];
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint8_t RxSize = INA229_regSize[regAddr];
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	4a19      	ldr	r2, [pc, #100]	; (8001160 <INA229_readReg+0xf0>)
 80010fc:	5cd3      	ldrb	r3, [r2, r3]
 80010fe:	75bb      	strb	r3, [r7, #22]

    for(uint8_t i= 0; i < RxSize; i++)
 8001100:	2300      	movs	r3, #0
 8001102:	75fb      	strb	r3, [r7, #23]
 8001104:	e01b      	b.n	800113e <INA229_readReg+0xce>
    {
        value = (value << 8) | rxBuf[i];
 8001106:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	f04f 0300 	mov.w	r3, #0
 8001112:	020b      	lsls	r3, r1, #8
 8001114:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8001118:	0202      	lsls	r2, r0, #8
 800111a:	7df9      	ldrb	r1, [r7, #23]
 800111c:	3120      	adds	r1, #32
 800111e:	4439      	add	r1, r7
 8001120:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8001124:	b2c9      	uxtb	r1, r1
 8001126:	2000      	movs	r0, #0
 8001128:	460c      	mov	r4, r1
 800112a:	4605      	mov	r5, r0
 800112c:	ea42 0804 	orr.w	r8, r2, r4
 8001130:	ea43 0905 	orr.w	r9, r3, r5
 8001134:	e9c7 8906 	strd	r8, r9, [r7, #24]
    for(uint8_t i= 0; i < RxSize; i++)
 8001138:	7dfb      	ldrb	r3, [r7, #23]
 800113a:	3301      	adds	r3, #1
 800113c:	75fb      	strb	r3, [r7, #23]
 800113e:	7dfa      	ldrb	r2, [r7, #23]
 8001140:	7dbb      	ldrb	r3, [r7, #22]
 8001142:	429a      	cmp	r2, r3
 8001144:	d3df      	bcc.n	8001106 <INA229_readReg+0x96>
    }

    return value;
 8001146:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001156:	bf00      	nop
 8001158:	20000048 	.word	0x20000048
 800115c:	40021000 	.word	0x40021000
 8001160:	08003948 	.word	0x08003948

08001164 <INA229_setCURRENT_LSB>:
/*
 *  ======== INA229_setCURRENT_LSB ========
 *  Set the CURRENT_LSB value used for calculations
 */
void INA229_setCURRENT_LSB(INA229_Handle sensor, float CURRENT_LSB)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	ed87 0a00 	vstr	s0, [r7]
    sensor->currentlsb = CURRENT_LSB;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	619a      	str	r2, [r3, #24]
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	0000      	movs	r0, r0
 8001184:	0000      	movs	r0, r0
	...

08001188 <INA229_getVSHUNT_mV>:
/*
 *  ======== INA229_getVSHUNT_mV ========
 *  Get VSHUNT value (mV)
 */
float INA229_getVSHUNT_mV(INA229_Handle sensor)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
    uint64_t value = INA229_readReg(sensor, INA229_vshunt_register);
 8001190:	2104      	movs	r1, #4
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ff6c 	bl	8001070 <INA229_readReg>
 8001198:	e9c7 0102 	strd	r0, r1, [r7, #8]
    float data;

    //Remove reserved bits
    value = value >> 4;
 800119c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	0902      	lsrs	r2, r0, #4
 80011aa:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80011ae:	090b      	lsrs	r3, r1, #4
 80011b0:	e9c7 2302 	strd	r2, r3, [r7, #8]

    //Convert for 2's compliment and signed value
    if(value > 0x7FFFF)
 80011b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011b8:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 80011bc:	f173 0300 	sbcs.w	r3, r3, #0
 80011c0:	d30c      	bcc.n	80011dc <INA229_getVSHUNT_mV+0x54>
    {
        data = (float)value - 0x100000;
 80011c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011c6:	f7ff fce5 	bl	8000b94 <__aeabi_ul2f>
 80011ca:	ee07 0a10 	vmov	s14, r0
 80011ce:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8001280 <INA229_getVSHUNT_mV+0xf8>
 80011d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d6:	edc7 7a05 	vstr	s15, [r7, #20]
 80011da:	e005      	b.n	80011e8 <INA229_getVSHUNT_mV+0x60>
    }
    else
    {
        data = (float)value;
 80011dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011e0:	f7ff fcd8 	bl	8000b94 <__aeabi_ul2f>
 80011e4:	4603      	mov	r3, r0
 80011e6:	617b      	str	r3, [r7, #20]
    }

    //Convert to mV

    if(sensor->adcrange == INA229_config_register_adcrange_4096mV)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	8adb      	ldrh	r3, [r3, #22]
 80011ec:	2b10      	cmp	r3, #16
 80011ee:	d119      	bne.n	8001224 <INA229_getVSHUNT_mV+0x9c>
    {
        data = (data * 78.125) / 1000000;
 80011f0:	6978      	ldr	r0, [r7, #20]
 80011f2:	f7ff f94d 	bl	8000490 <__aeabi_f2d>
 80011f6:	a31c      	add	r3, pc, #112	; (adr r3, 8001268 <INA229_getVSHUNT_mV+0xe0>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff f9a0 	bl	8000540 <__aeabi_dmul>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4610      	mov	r0, r2
 8001206:	4619      	mov	r1, r3
 8001208:	a319      	add	r3, pc, #100	; (adr r3, 8001270 <INA229_getVSHUNT_mV+0xe8>)
 800120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120e:	f7ff fac1 	bl	8000794 <__aeabi_ddiv>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4610      	mov	r0, r2
 8001218:	4619      	mov	r1, r3
 800121a:	f7ff fba3 	bl	8000964 <__aeabi_d2f>
 800121e:	4603      	mov	r3, r0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	e018      	b.n	8001256 <INA229_getVSHUNT_mV+0xce>
    }
    else
    {
        data = (data * 312.5) / 1000000;
 8001224:	6978      	ldr	r0, [r7, #20]
 8001226:	f7ff f933 	bl	8000490 <__aeabi_f2d>
 800122a:	a313      	add	r3, pc, #76	; (adr r3, 8001278 <INA229_getVSHUNT_mV+0xf0>)
 800122c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001230:	f7ff f986 	bl	8000540 <__aeabi_dmul>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	a30c      	add	r3, pc, #48	; (adr r3, 8001270 <INA229_getVSHUNT_mV+0xe8>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff faa7 	bl	8000794 <__aeabi_ddiv>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fb89 	bl	8000964 <__aeabi_d2f>
 8001252:	4603      	mov	r3, r0
 8001254:	617b      	str	r3, [r7, #20]
    }

    return data;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	ee07 3a90 	vmov	s15, r3
}
 800125c:	eeb0 0a67 	vmov.f32	s0, s15
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	00000000 	.word	0x00000000
 800126c:	40538800 	.word	0x40538800
 8001270:	00000000 	.word	0x00000000
 8001274:	412e8480 	.word	0x412e8480
 8001278:	00000000 	.word	0x00000000
 800127c:	40738800 	.word	0x40738800
 8001280:	49800000 	.word	0x49800000
 8001284:	00000000 	.word	0x00000000

08001288 <INA229_getVBUS_V>:
/*
 *  ======== INA229_getVBUS_V ========
 *  Get VBUS value (V)
 */
float INA229_getVBUS_V(INA229_Handle sensor)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
    uint64_t value = INA229_readReg(sensor, INA229_vbus_register);
 8001290:	2105      	movs	r1, #5
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff feec 	bl	8001070 <INA229_readReg>
 8001298:	e9c7 0102 	strd	r0, r1, [r7, #8]
    float data;

    //Remove reserved bits
    value = value >> 4;
 800129c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	f04f 0300 	mov.w	r3, #0
 80012a8:	0902      	lsrs	r2, r0, #4
 80012aa:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80012ae:	090b      	lsrs	r3, r1, #4
 80012b0:	e9c7 2302 	strd	r2, r3, [r7, #8]

    //Convert for 2's compliment and signed value (though always positive)
    if(value > 0x7FFFF)
 80012b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012b8:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 80012bc:	f173 0300 	sbcs.w	r3, r3, #0
 80012c0:	d30c      	bcc.n	80012dc <INA229_getVBUS_V+0x54>
    {
        data = (float)value - 0x100000; //left for redundancy and error checking, should never get used
 80012c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012c6:	f7ff fc65 	bl	8000b94 <__aeabi_ul2f>
 80012ca:	ee07 0a10 	vmov	s14, r0
 80012ce:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8001340 <INA229_getVBUS_V+0xb8>
 80012d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d6:	edc7 7a05 	vstr	s15, [r7, #20]
 80012da:	e005      	b.n	80012e8 <INA229_getVBUS_V+0x60>
    }
    else
    {
        data = (float)value;
 80012dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012e0:	f7ff fc58 	bl	8000b94 <__aeabi_ul2f>
 80012e4:	4603      	mov	r3, r0
 80012e6:	617b      	str	r3, [r7, #20]
    }

    //Convert to V
    data = (data * 195.3125) / 1000000;
 80012e8:	6978      	ldr	r0, [r7, #20]
 80012ea:	f7ff f8d1 	bl	8000490 <__aeabi_f2d>
 80012ee:	a310      	add	r3, pc, #64	; (adr r3, 8001330 <INA229_getVBUS_V+0xa8>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7ff f924 	bl	8000540 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	a30d      	add	r3, pc, #52	; (adr r3, 8001338 <INA229_getVBUS_V+0xb0>)
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	f7ff fa45 	bl	8000794 <__aeabi_ddiv>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fb27 	bl	8000964 <__aeabi_d2f>
 8001316:	4603      	mov	r3, r0
 8001318:	617b      	str	r3, [r7, #20]

    return data;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	ee07 3a90 	vmov	s15, r3
}
 8001320:	eeb0 0a67 	vmov.f32	s0, s15
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	f3af 8000 	nop.w
 8001330:	00000000 	.word	0x00000000
 8001334:	40686a00 	.word	0x40686a00
 8001338:	00000000 	.word	0x00000000
 800133c:	412e8480 	.word	0x412e8480
 8001340:	49800000 	.word	0x49800000

08001344 <INA229_getDIETEMP_C>:
/*
 *  ======== INA229_getDIETEMP_C ========
 *  Get DIETMEP value (C)
 */
float INA229_getDIETEMP_C(INA229_Handle sensor)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
    uint64_t value = INA229_readReg(sensor, INA229_dietemp_register);
 800134c:	2106      	movs	r1, #6
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fe8e 	bl	8001070 <INA229_readReg>
 8001354:	e9c7 0102 	strd	r0, r1, [r7, #8]
    float data;

    //Convert for 2's compliment and signed value
    if(value > 0x7FFF)
 8001358:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800135c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001360:	f173 0300 	sbcs.w	r3, r3, #0
 8001364:	d30c      	bcc.n	8001380 <INA229_getDIETEMP_C+0x3c>
    {
        data = (float)value - 0x10000;
 8001366:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800136a:	f7ff fc13 	bl	8000b94 <__aeabi_ul2f>
 800136e:	ee07 0a10 	vmov	s14, r0
 8001372:	eddf 7a17 	vldr	s15, [pc, #92]	; 80013d0 <INA229_getDIETEMP_C+0x8c>
 8001376:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137a:	edc7 7a05 	vstr	s15, [r7, #20]
 800137e:	e005      	b.n	800138c <INA229_getDIETEMP_C+0x48>
    }
    else
    {
        data = (float)value;
 8001380:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001384:	f7ff fc06 	bl	8000b94 <__aeabi_ul2f>
 8001388:	4603      	mov	r3, r0
 800138a:	617b      	str	r3, [r7, #20]
    }

    //Convert to C
    data = (data * 7.8125) / 1000;
 800138c:	6978      	ldr	r0, [r7, #20]
 800138e:	f7ff f87f 	bl	8000490 <__aeabi_f2d>
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <INA229_getDIETEMP_C+0x90>)
 8001398:	f7ff f8d2 	bl	8000540 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <INA229_getDIETEMP_C+0x94>)
 80013aa:	f7ff f9f3 	bl	8000794 <__aeabi_ddiv>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fad5 	bl	8000964 <__aeabi_d2f>
 80013ba:	4603      	mov	r3, r0
 80013bc:	617b      	str	r3, [r7, #20]

    return data;
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	ee07 3a90 	vmov	s15, r3
}
 80013c4:	eeb0 0a67 	vmov.f32	s0, s15
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	47800000 	.word	0x47800000
 80013d4:	401f4000 	.word	0x401f4000
 80013d8:	408f4000 	.word	0x408f4000

080013dc <INA229_getCURRENT_signedLSB>:
/*
 *  ======== INA229_getCURRENT_signedLSB ========
 *  Get CURRENT value (signed value in LSBs)
 */
float INA229_getCURRENT_signedLSB(INA229_Handle sensor)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
    uint64_t value = INA229_readReg(sensor, INA229_current_register);
 80013e4:	2107      	movs	r1, #7
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff fe42 	bl	8001070 <INA229_readReg>
 80013ec:	e9c7 0102 	strd	r0, r1, [r7, #8]
    float data;

    //Remove reserved bits
    value = value >> 4;
 80013f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	f04f 0300 	mov.w	r3, #0
 80013fc:	0902      	lsrs	r2, r0, #4
 80013fe:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8001402:	090b      	lsrs	r3, r1, #4
 8001404:	e9c7 2302 	strd	r2, r3, [r7, #8]

    //Convert for 2's compliment and signed value
    if(value > 0x7FFFF)
 8001408:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800140c:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8001410:	f173 0300 	sbcs.w	r3, r3, #0
 8001414:	d30c      	bcc.n	8001430 <INA229_getCURRENT_signedLSB+0x54>
    {
        data = (float)value - 0x100000;
 8001416:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800141a:	f7ff fbbb 	bl	8000b94 <__aeabi_ul2f>
 800141e:	ee07 0a10 	vmov	s14, r0
 8001422:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800144c <INA229_getCURRENT_signedLSB+0x70>
 8001426:	ee77 7a67 	vsub.f32	s15, s14, s15
 800142a:	edc7 7a05 	vstr	s15, [r7, #20]
 800142e:	e005      	b.n	800143c <INA229_getCURRENT_signedLSB+0x60>
    }
    else
    {
        data = (float)value;
 8001430:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001434:	f7ff fbae 	bl	8000b94 <__aeabi_ul2f>
 8001438:	4603      	mov	r3, r0
 800143a:	617b      	str	r3, [r7, #20]
    }

    return data;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	ee07 3a90 	vmov	s15, r3
}
 8001442:	eeb0 0a67 	vmov.f32	s0, s15
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	49800000 	.word	0x49800000

08001450 <INA229_getCURRENT_A>:
/*
 *  ======== INA229_getCURRENT_A ========
 *  Get CURRENT value (A)
 */
float INA229_getCURRENT_A(INA229_Handle sensor)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
    float data = INA229_getCURRENT_signedLSB(sensor);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ffbf 	bl	80013dc <INA229_getCURRENT_signedLSB>
 800145e:	ed87 0a03 	vstr	s0, [r7, #12]

    data = data * sensor->currentlsb;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	edd3 7a06 	vldr	s15, [r3, #24]
 8001468:	ed97 7a03 	vldr	s14, [r7, #12]
 800146c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001470:	edc7 7a03 	vstr	s15, [r7, #12]

    return data;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	ee07 3a90 	vmov	s15, r3
}
 800147a:	eeb0 0a67 	vmov.f32	s0, s15
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <INA229_Init>:
 *
 * @param hspi Pointer to SPI struct handler
 */

void INA229_Init(SPI_HandleTypeDef * hspi, TIM_HandleTypeDef *htim)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Start(htim);
 800148e:	6838      	ldr	r0, [r7, #0]
 8001490:	f002 f89c 	bl	80035cc <HAL_TIM_Base_Start>
	INA229_SPI = hspi;
 8001494:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <INA229_Init+0x3c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
	Delay_Timer = htim;
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <INA229_Init+0x40>)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	6013      	str	r3, [r2, #0]
	INA229_config(INA229_1);
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <INA229_Init+0x44>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fd3e 	bl	8000f24 <INA229_config>
	INA229_setCURRENT_LSB(INA229_1, current_LSB);
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <INA229_Init+0x44>)
 80014aa:	eddf 7a08 	vldr	s15, [pc, #32]	; 80014cc <INA229_Init+0x48>
 80014ae:	eeb0 0a67 	vmov.f32	s0, s15
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fe56 	bl	8001164 <INA229_setCURRENT_LSB>
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000048 	.word	0x20000048
 80014c4:	2000004c 	.word	0x2000004c
 80014c8:	20000000 	.word	0x20000000
 80014cc:	36000000 	.word	0x36000000

080014d0 <Get_INA299_Readings>:
	HAL_Delay(msWait);
}
/********* MCU SPECIFIC DELAY CODE ENDS HERE************/

/********* START INA299 READING ************/
INA299_Readings Get_INA299_Readings(void) {
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b08f      	sub	sp, #60	; 0x3c
 80014d4:	af00      	add	r7, sp, #0

	/* Note: in continuous modes (CC), polling rate should
	 *       not exceed sensor conversion rate
	 */
	INA299_Readings sensor_readings;
	uint16_t currentMillis = __HAL_TIM_GET_COUNTER(Delay_Timer);
 80014d6:	4b29      	ldr	r3, [pc, #164]	; (800157c <Get_INA299_Readings+0xac>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	86fb      	strh	r3, [r7, #54]	; 0x36
	static uint16_t previousMillis = 0;
	const uint16_t delay = 100;
 80014e0:	2364      	movs	r3, #100	; 0x64
 80014e2:	86bb      	strh	r3, [r7, #52]	; 0x34
	if (__HAL_TIM_GET_COUNTER(Delay_Timer) - previousMillis >= delay)
 80014e4:	4b25      	ldr	r3, [pc, #148]	; (800157c <Get_INA299_Readings+0xac>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	4a24      	ldr	r2, [pc, #144]	; (8001580 <Get_INA299_Readings+0xb0>)
 80014ee:	8812      	ldrh	r2, [r2, #0]
 80014f0:	1a9a      	subs	r2, r3, r2
 80014f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d322      	bcc.n	800153e <Get_INA299_Readings+0x6e>
	{
		sensor_readings.VSHUNT_mV = INA229_getVSHUNT_mV(INA229_1);
 80014f8:	4b22      	ldr	r3, [pc, #136]	; (8001584 <Get_INA299_Readings+0xb4>)
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fe44 	bl	8001188 <INA229_getVSHUNT_mV>
 8001500:	eef0 7a40 	vmov.f32	s15, s0
 8001504:	edc7 7a05 	vstr	s15, [r7, #20]
		sensor_readings.VBUS_V = INA229_getVBUS_V(INA229_1);
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <Get_INA299_Readings+0xb4>)
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff febc 	bl	8001288 <INA229_getVBUS_V>
 8001510:	eef0 7a40 	vmov.f32	s15, s0
 8001514:	edc7 7a06 	vstr	s15, [r7, #24]
		sensor_readings.CURRENT_A = INA229_getCURRENT_A(INA229_1);
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <Get_INA299_Readings+0xb4>)
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ff98 	bl	8001450 <INA229_getCURRENT_A>
 8001520:	eef0 7a40 	vmov.f32	s15, s0
 8001524:	edc7 7a07 	vstr	s15, [r7, #28]
		sensor_readings.DIETEMP_C = INA229_getDIETEMP_C(INA229_1);
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <Get_INA299_Readings+0xb4>)
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff0a 	bl	8001344 <INA229_getDIETEMP_C>
 8001530:	eef0 7a40 	vmov.f32	s15, s0
 8001534:	edc7 7a08 	vstr	s15, [r7, #32]
		//	mcu_msWait(100); /* delay 1 sec */
		previousMillis = currentMillis;
 8001538:	4a11      	ldr	r2, [pc, #68]	; (8001580 <Get_INA299_Readings+0xb0>)
 800153a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800153c:	8013      	strh	r3, [r2, #0]
	}
	return sensor_readings;
 800153e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001548:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800154c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800154e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001554:	ee06 0a10 	vmov	s12, r0
 8001558:	ee06 1a90 	vmov	s13, r1
 800155c:	ee07 2a10 	vmov	s14, r2
 8001560:	ee07 3a90 	vmov	s15, r3
}
 8001564:	eeb0 0a46 	vmov.f32	s0, s12
 8001568:	eef0 0a66 	vmov.f32	s1, s13
 800156c:	eeb0 1a47 	vmov.f32	s2, s14
 8001570:	eef0 1a67 	vmov.f32	s3, s15
 8001574:	373c      	adds	r7, #60	; 0x3c
 8001576:	46bd      	mov	sp, r7
 8001578:	bd90      	pop	{r4, r7, pc}
 800157a:	bf00      	nop
 800157c:	2000004c 	.word	0x2000004c
 8001580:	20000050 	.word	0x20000050
 8001584:	20000000 	.word	0x20000000

08001588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800158c:	f000 fab6 	bl	8001afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001590:	f000 f826 	bl	80015e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001594:	f000 f8fa 	bl	800178c <MX_GPIO_Init>
  MX_SPI2_Init();
 8001598:	f000 f88c 	bl	80016b4 <MX_SPI2_Init>
  MX_TIM6_Init();
 800159c:	f000 f8c0 	bl	8001720 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	/* Init SPI1 as Power sense SPI port */
	INA229_Init(&hspi2,&htim6);
 80015a0:	490c      	ldr	r1, [pc, #48]	; (80015d4 <main+0x4c>)
 80015a2:	480d      	ldr	r0, [pc, #52]	; (80015d8 <main+0x50>)
 80015a4:	f7ff ff6e 	bl	8001484 <INA229_Init>
	Buzzer_Trigger();
 80015a8:	f000 f964 	bl	8001874 <Buzzer_Trigger>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		INA299_Values = Get_INA299_Readings();
 80015ac:	f7ff ff90 	bl	80014d0 <Get_INA299_Readings>
 80015b0:	eeb0 6a40 	vmov.f32	s12, s0
 80015b4:	eef0 6a60 	vmov.f32	s13, s1
 80015b8:	eeb0 7a41 	vmov.f32	s14, s2
 80015bc:	eef0 7a61 	vmov.f32	s15, s3
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <main+0x54>)
 80015c2:	ed83 6a00 	vstr	s12, [r3]
 80015c6:	edc3 6a01 	vstr	s13, [r3, #4]
 80015ca:	ed83 7a02 	vstr	s14, [r3, #8]
 80015ce:	edc3 7a03 	vstr	s15, [r3, #12]
 80015d2:	e7eb      	b.n	80015ac <main+0x24>
 80015d4:	200000ac 	.word	0x200000ac
 80015d8:	20000054 	.word	0x20000054
 80015dc:	200000f4 	.word	0x200000f4

080015e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b094      	sub	sp, #80	; 0x50
 80015e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e6:	f107 0320 	add.w	r3, r7, #32
 80015ea:	2230      	movs	r2, #48	; 0x30
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f002 f994 	bl	800391c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	4b28      	ldr	r3, [pc, #160]	; (80016ac <SystemClock_Config+0xcc>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	4a27      	ldr	r2, [pc, #156]	; (80016ac <SystemClock_Config+0xcc>)
 800160e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001612:	6413      	str	r3, [r2, #64]	; 0x40
 8001614:	4b25      	ldr	r3, [pc, #148]	; (80016ac <SystemClock_Config+0xcc>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001620:	2300      	movs	r3, #0
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <SystemClock_Config+0xd0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <SystemClock_Config+0xd0>)
 800162a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <SystemClock_Config+0xd0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800163c:	2302      	movs	r3, #2
 800163e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001640:	2301      	movs	r3, #1
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001644:	2310      	movs	r3, #16
 8001646:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001648:	2302      	movs	r3, #2
 800164a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800164c:	2300      	movs	r3, #0
 800164e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001650:	2308      	movs	r3, #8
 8001652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001654:	2350      	movs	r3, #80	; 0x50
 8001656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001658:	2302      	movs	r3, #2
 800165a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800165c:	2304      	movs	r3, #4
 800165e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001660:	f107 0320 	add.w	r3, r7, #32
 8001664:	4618      	mov	r0, r3
 8001666:	f000 fd95 	bl	8002194 <HAL_RCC_OscConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001670:	f000 f926 	bl	80018c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001674:	230f      	movs	r3, #15
 8001676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001678:	2302      	movs	r3, #2
 800167a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001680:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2102      	movs	r1, #2
 8001692:	4618      	mov	r0, r3
 8001694:	f000 fff6 	bl	8002684 <HAL_RCC_ClockConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800169e:	f000 f90f 	bl	80018c0 <Error_Handler>
  }
}
 80016a2:	bf00      	nop
 80016a4:	3750      	adds	r7, #80	; 0x50
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40007000 	.word	0x40007000

080016b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016b8:	4b17      	ldr	r3, [pc, #92]	; (8001718 <MX_SPI2_Init+0x64>)
 80016ba:	4a18      	ldr	r2, [pc, #96]	; (800171c <MX_SPI2_Init+0x68>)
 80016bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <MX_SPI2_Init+0x64>)
 80016c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <MX_SPI2_Init+0x64>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <MX_SPI2_Init+0x64>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <MX_SPI2_Init+0x64>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <MX_SPI2_Init+0x64>)
 80016da:	2201      	movs	r2, #1
 80016dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <MX_SPI2_Init+0x64>)
 80016e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <MX_SPI2_Init+0x64>)
 80016e8:	2218      	movs	r2, #24
 80016ea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <MX_SPI2_Init+0x64>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <MX_SPI2_Init+0x64>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f8:	4b07      	ldr	r3, [pc, #28]	; (8001718 <MX_SPI2_Init+0x64>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <MX_SPI2_Init+0x64>)
 8001700:	220a      	movs	r2, #10
 8001702:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001704:	4804      	ldr	r0, [pc, #16]	; (8001718 <MX_SPI2_Init+0x64>)
 8001706:	f001 f969 	bl	80029dc <HAL_SPI_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001710:	f000 f8d6 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000054 	.word	0x20000054
 800171c:	40003800 	.word	0x40003800

08001720 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001726:	463b      	mov	r3, r7
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <MX_TIM6_Init+0x64>)
 8001730:	4a15      	ldr	r2, [pc, #84]	; (8001788 <MX_TIM6_Init+0x68>)
 8001732:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 40000 - 1;
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <MX_TIM6_Init+0x64>)
 8001736:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800173a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_TIM6_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <MX_TIM6_Init+0x64>)
 8001744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001748:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_TIM6_Init+0x64>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001750:	480c      	ldr	r0, [pc, #48]	; (8001784 <MX_TIM6_Init+0x64>)
 8001752:	f001 feeb 	bl	800352c <HAL_TIM_Base_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800175c:	f000 f8b0 	bl	80018c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001768:	463b      	mov	r3, r7
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_TIM6_Init+0x64>)
 800176e:	f002 f835 	bl	80037dc <HAL_TIMEx_MasterConfigSynchronization>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001778:	f000 f8a2 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200000ac 	.word	0x200000ac
 8001788:	40001000 	.word	0x40001000

0800178c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001792:	f107 030c 	add.w	r3, r7, #12
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	4b30      	ldr	r3, [pc, #192]	; (8001868 <MX_GPIO_Init+0xdc>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a2f      	ldr	r2, [pc, #188]	; (8001868 <MX_GPIO_Init+0xdc>)
 80017ac:	f043 0310 	orr.w	r3, r3, #16
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <MX_GPIO_Init+0xdc>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	4b29      	ldr	r3, [pc, #164]	; (8001868 <MX_GPIO_Init+0xdc>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a28      	ldr	r2, [pc, #160]	; (8001868 <MX_GPIO_Init+0xdc>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b26      	ldr	r3, [pc, #152]	; (8001868 <MX_GPIO_Init+0xdc>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	4b22      	ldr	r3, [pc, #136]	; (8001868 <MX_GPIO_Init+0xdc>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a21      	ldr	r2, [pc, #132]	; (8001868 <MX_GPIO_Init+0xdc>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <MX_GPIO_Init+0xdc>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BUZZER_Pin|INA229_SPI_CS_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80017fc:	481b      	ldr	r0, [pc, #108]	; (800186c <MX_GPIO_Init+0xe0>)
 80017fe:	f000 fc95 	bl	800212c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	2101      	movs	r1, #1
 8001806:	481a      	ldr	r0, [pc, #104]	; (8001870 <MX_GPIO_Init+0xe4>)
 8001808:	f000 fc90 	bl	800212c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUZZER_Pin INA229_SPI_CS_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|INA229_SPI_CS_Pin;
 800180c:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001812:	2301      	movs	r3, #1
 8001814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	4619      	mov	r1, r3
 8001824:	4811      	ldr	r0, [pc, #68]	; (800186c <MX_GPIO_Init+0xe0>)
 8001826:	f000 fae5 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800182a:	2301      	movs	r3, #1
 800182c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	2301      	movs	r3, #1
 8001830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	4619      	mov	r1, r3
 8001840:	480b      	ldr	r0, [pc, #44]	; (8001870 <MX_GPIO_Init+0xe4>)
 8001842:	f000 fad7 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_ALERT_Pin */
  GPIO_InitStruct.Pin = PWR_ALERT_Pin;
 8001846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800184a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PWR_ALERT_GPIO_Port, &GPIO_InitStruct);
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	4619      	mov	r1, r3
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <MX_GPIO_Init+0xe4>)
 800185c:	f000 faca 	bl	8001df4 <HAL_GPIO_Init>

}
 8001860:	bf00      	nop
 8001862:	3720      	adds	r7, #32
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40023800 	.word	0x40023800
 800186c:	40021000 	.word	0x40021000
 8001870:	40020400 	.word	0x40020400

08001874 <Buzzer_Trigger>:

/* USER CODE BEGIN 4 */
void Buzzer_Trigger(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001878:	2104      	movs	r1, #4
 800187a:	4810      	ldr	r0, [pc, #64]	; (80018bc <Buzzer_Trigger+0x48>)
 800187c:	f000 fc6f 	bl	800215e <HAL_GPIO_TogglePin>
	HAL_Delay(50);
 8001880:	2032      	movs	r0, #50	; 0x32
 8001882:	f000 f9ad 	bl	8001be0 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001886:	2104      	movs	r1, #4
 8001888:	480c      	ldr	r0, [pc, #48]	; (80018bc <Buzzer_Trigger+0x48>)
 800188a:	f000 fc68 	bl	800215e <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 800188e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001892:	f000 f9a5 	bl	8001be0 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001896:	2104      	movs	r1, #4
 8001898:	4808      	ldr	r0, [pc, #32]	; (80018bc <Buzzer_Trigger+0x48>)
 800189a:	f000 fc60 	bl	800215e <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 800189e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80018a2:	f000 f99d 	bl	8001be0 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80018a6:	2104      	movs	r1, #4
 80018a8:	4804      	ldr	r0, [pc, #16]	; (80018bc <Buzzer_Trigger+0x48>)
 80018aa:	f000 fc58 	bl	800215e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2104      	movs	r1, #4
 80018b2:	4802      	ldr	r0, [pc, #8]	; (80018bc <Buzzer_Trigger+0x48>)
 80018b4:	f000 fc3a 	bl	800212c <HAL_GPIO_WritePin>
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40021000 	.word	0x40021000

080018c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c4:	b672      	cpsid	i
}
 80018c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80018c8:	e7fe      	b.n	80018c8 <Error_Handler+0x8>
	...

080018cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_MspInit+0x4c>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	4a0f      	ldr	r2, [pc, #60]	; (8001918 <HAL_MspInit+0x4c>)
 80018dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e0:	6453      	str	r3, [r2, #68]	; 0x44
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_MspInit+0x4c>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_MspInit+0x4c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a08      	ldr	r2, [pc, #32]	; (8001918 <HAL_MspInit+0x4c>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_MspInit+0x4c>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800

0800191c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a28      	ldr	r2, [pc, #160]	; (80019dc <HAL_SPI_MspInit+0xc0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d14a      	bne.n	80019d4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <HAL_SPI_MspInit+0xc4>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a26      	ldr	r2, [pc, #152]	; (80019e0 <HAL_SPI_MspInit+0xc4>)
 8001948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <HAL_SPI_MspInit+0xc4>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <HAL_SPI_MspInit+0xc4>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a1f      	ldr	r2, [pc, #124]	; (80019e0 <HAL_SPI_MspInit+0xc4>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <HAL_SPI_MspInit+0xc4>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <HAL_SPI_MspInit+0xc4>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a18      	ldr	r2, [pc, #96]	; (80019e0 <HAL_SPI_MspInit+0xc4>)
 8001980:	f043 0302 	orr.w	r3, r3, #2
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <HAL_SPI_MspInit+0xc4>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001992:	230c      	movs	r3, #12
 8001994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199e:	2303      	movs	r3, #3
 80019a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019a2:	2305      	movs	r3, #5
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	480d      	ldr	r0, [pc, #52]	; (80019e4 <HAL_SPI_MspInit+0xc8>)
 80019ae:	f000 fa21 	bl	8001df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019c4:	2305      	movs	r3, #5
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4619      	mov	r1, r3
 80019ce:	4806      	ldr	r0, [pc, #24]	; (80019e8 <HAL_SPI_MspInit+0xcc>)
 80019d0:	f000 fa10 	bl	8001df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019d4:	bf00      	nop
 80019d6:	3728      	adds	r7, #40	; 0x28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40003800 	.word	0x40003800
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020800 	.word	0x40020800
 80019e8:	40020400 	.word	0x40020400

080019ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <HAL_TIM_Base_MspInit+0x3c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d10d      	bne.n	8001a1a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <HAL_TIM_Base_MspInit+0x40>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a09      	ldr	r2, [pc, #36]	; (8001a2c <HAL_TIM_Base_MspInit+0x40>)
 8001a08:	f043 0310 	orr.w	r3, r3, #16
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <HAL_TIM_Base_MspInit+0x40>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40001000 	.word	0x40001000
 8001a2c:	40023800 	.word	0x40023800

08001a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <NMI_Handler+0x4>

08001a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <HardFault_Handler+0x4>

08001a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <MemManage_Handler+0x4>

08001a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <BusFault_Handler+0x4>

08001a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <UsageFault_Handler+0x4>

08001a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a7c:	f000 f890 	bl	8001ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <SystemInit+0x20>)
 8001a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <SystemInit+0x20>)
 8001a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aac:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aae:	490e      	ldr	r1, [pc, #56]	; (8001ae8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ab0:	4a0e      	ldr	r2, [pc, #56]	; (8001aec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab4:	e002      	b.n	8001abc <LoopCopyDataInit>

08001ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aba:	3304      	adds	r3, #4

08001abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac0:	d3f9      	bcc.n	8001ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ac4:	4c0b      	ldr	r4, [pc, #44]	; (8001af4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac8:	e001      	b.n	8001ace <LoopFillZerobss>

08001aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001acc:	3204      	adds	r2, #4

08001ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad0:	d3fb      	bcc.n	8001aca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ad2:	f7ff ffd7 	bl	8001a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad6:	f001 fefd 	bl	80038d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ada:	f7ff fd55 	bl	8001588 <main>
  bx  lr    
 8001ade:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ae0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001aec:	080039a8 	.word	0x080039a8
  ldr r2, =_sbss
 8001af0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001af4:	20000108 	.word	0x20000108

08001af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af8:	e7fe      	b.n	8001af8 <ADC_IRQHandler>
	...

08001afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <HAL_Init+0x40>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <HAL_Init+0x40>)
 8001b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_Init+0x40>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <HAL_Init+0x40>)
 8001b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <HAL_Init+0x40>)
 8001b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b24:	2003      	movs	r0, #3
 8001b26:	f000 f931 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b2a:	200f      	movs	r0, #15
 8001b2c:	f000 f808 	bl	8001b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b30:	f7ff fecc 	bl	80018cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023c00 	.word	0x40023c00

08001b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_InitTick+0x54>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_InitTick+0x58>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4619      	mov	r1, r3
 8001b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 f93b 	bl	8001dda <HAL_SYSTICK_Config>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e00e      	b.n	8001b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b0f      	cmp	r3, #15
 8001b72:	d80a      	bhi.n	8001b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b74:	2200      	movs	r2, #0
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	f000 f911 	bl	8001da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b80:	4a06      	ldr	r2, [pc, #24]	; (8001b9c <HAL_InitTick+0x5c>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e000      	b.n	8001b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000020 	.word	0x20000020
 8001b98:	20000028 	.word	0x20000028
 8001b9c:	20000024 	.word	0x20000024

08001ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x20>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_IncTick+0x24>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4413      	add	r3, r2
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <HAL_IncTick+0x24>)
 8001bb2:	6013      	str	r3, [r2, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000028 	.word	0x20000028
 8001bc4:	20000104 	.word	0x20000104

08001bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return uwTick;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <HAL_GetTick+0x14>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000104 	.word	0x20000104

08001be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be8:	f7ff ffee 	bl	8001bc8 <HAL_GetTick>
 8001bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf8:	d005      	beq.n	8001c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_Delay+0x44>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c06:	bf00      	nop
 8001c08:	f7ff ffde 	bl	8001bc8 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d8f7      	bhi.n	8001c08 <HAL_Delay+0x28>
  {
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000028 	.word	0x20000028

08001c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c44:	4013      	ands	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5a:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	60d3      	str	r3, [r2, #12]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <__NVIC_GetPriorityGrouping+0x18>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	f003 0307 	and.w	r3, r3, #7
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	db0a      	blt.n	8001cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	490c      	ldr	r1, [pc, #48]	; (8001cd8 <__NVIC_SetPriority+0x4c>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb4:	e00a      	b.n	8001ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4908      	ldr	r1, [pc, #32]	; (8001cdc <__NVIC_SetPriority+0x50>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3b04      	subs	r3, #4
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	761a      	strb	r2, [r3, #24]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f1c3 0307 	rsb	r3, r3, #7
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	bf28      	it	cs
 8001cfe:	2304      	movcs	r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d902      	bls.n	8001d10 <NVIC_EncodePriority+0x30>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b03      	subs	r3, #3
 8001d0e:	e000      	b.n	8001d12 <NVIC_EncodePriority+0x32>
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	4313      	orrs	r3, r2
         );
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d58:	d301      	bcc.n	8001d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00f      	b.n	8001d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <SysTick_Config+0x40>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d66:	210f      	movs	r1, #15
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f7ff ff8e 	bl	8001c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <SysTick_Config+0x40>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <SysTick_Config+0x40>)
 8001d78:	2207      	movs	r2, #7
 8001d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	e000e010 	.word	0xe000e010

08001d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff47 	bl	8001c28 <__NVIC_SetPriorityGrouping>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db4:	f7ff ff5c 	bl	8001c70 <__NVIC_GetPriorityGrouping>
 8001db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	6978      	ldr	r0, [r7, #20]
 8001dc0:	f7ff ff8e 	bl	8001ce0 <NVIC_EncodePriority>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff5d 	bl	8001c8c <__NVIC_SetPriority>
}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ffb0 	bl	8001d48 <SysTick_Config>
 8001de8:	4603      	mov	r3, r0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
 8001e0e:	e16b      	b.n	80020e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e10:	2201      	movs	r2, #1
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	f040 815a 	bne.w	80020e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d005      	beq.n	8001e46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d130      	bne.n	8001ea8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	2203      	movs	r2, #3
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 0201 	and.w	r2, r3, #1
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d017      	beq.n	8001ee4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d123      	bne.n	8001f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	08da      	lsrs	r2, r3, #3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3208      	adds	r2, #8
 8001ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	220f      	movs	r2, #15
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	08da      	lsrs	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3208      	adds	r2, #8
 8001f32:	69b9      	ldr	r1, [r7, #24]
 8001f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2203      	movs	r2, #3
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0203 	and.w	r2, r3, #3
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80b4 	beq.w	80020e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b60      	ldr	r3, [pc, #384]	; (8002100 <HAL_GPIO_Init+0x30c>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	4a5f      	ldr	r2, [pc, #380]	; (8002100 <HAL_GPIO_Init+0x30c>)
 8001f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f88:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8a:	4b5d      	ldr	r3, [pc, #372]	; (8002100 <HAL_GPIO_Init+0x30c>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f96:	4a5b      	ldr	r2, [pc, #364]	; (8002104 <HAL_GPIO_Init+0x310>)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	220f      	movs	r2, #15
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a52      	ldr	r2, [pc, #328]	; (8002108 <HAL_GPIO_Init+0x314>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d02b      	beq.n	800201a <HAL_GPIO_Init+0x226>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a51      	ldr	r2, [pc, #324]	; (800210c <HAL_GPIO_Init+0x318>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d025      	beq.n	8002016 <HAL_GPIO_Init+0x222>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a50      	ldr	r2, [pc, #320]	; (8002110 <HAL_GPIO_Init+0x31c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d01f      	beq.n	8002012 <HAL_GPIO_Init+0x21e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4f      	ldr	r2, [pc, #316]	; (8002114 <HAL_GPIO_Init+0x320>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d019      	beq.n	800200e <HAL_GPIO_Init+0x21a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a4e      	ldr	r2, [pc, #312]	; (8002118 <HAL_GPIO_Init+0x324>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <HAL_GPIO_Init+0x216>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4d      	ldr	r2, [pc, #308]	; (800211c <HAL_GPIO_Init+0x328>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00d      	beq.n	8002006 <HAL_GPIO_Init+0x212>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4c      	ldr	r2, [pc, #304]	; (8002120 <HAL_GPIO_Init+0x32c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d007      	beq.n	8002002 <HAL_GPIO_Init+0x20e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4b      	ldr	r2, [pc, #300]	; (8002124 <HAL_GPIO_Init+0x330>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d101      	bne.n	8001ffe <HAL_GPIO_Init+0x20a>
 8001ffa:	2307      	movs	r3, #7
 8001ffc:	e00e      	b.n	800201c <HAL_GPIO_Init+0x228>
 8001ffe:	2308      	movs	r3, #8
 8002000:	e00c      	b.n	800201c <HAL_GPIO_Init+0x228>
 8002002:	2306      	movs	r3, #6
 8002004:	e00a      	b.n	800201c <HAL_GPIO_Init+0x228>
 8002006:	2305      	movs	r3, #5
 8002008:	e008      	b.n	800201c <HAL_GPIO_Init+0x228>
 800200a:	2304      	movs	r3, #4
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x228>
 800200e:	2303      	movs	r3, #3
 8002010:	e004      	b.n	800201c <HAL_GPIO_Init+0x228>
 8002012:	2302      	movs	r3, #2
 8002014:	e002      	b.n	800201c <HAL_GPIO_Init+0x228>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_GPIO_Init+0x228>
 800201a:	2300      	movs	r3, #0
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	f002 0203 	and.w	r2, r2, #3
 8002022:	0092      	lsls	r2, r2, #2
 8002024:	4093      	lsls	r3, r2
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800202c:	4935      	ldr	r1, [pc, #212]	; (8002104 <HAL_GPIO_Init+0x310>)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3302      	adds	r3, #2
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800203a:	4b3b      	ldr	r3, [pc, #236]	; (8002128 <HAL_GPIO_Init+0x334>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800205e:	4a32      	ldr	r2, [pc, #200]	; (8002128 <HAL_GPIO_Init+0x334>)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002064:	4b30      	ldr	r3, [pc, #192]	; (8002128 <HAL_GPIO_Init+0x334>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002088:	4a27      	ldr	r2, [pc, #156]	; (8002128 <HAL_GPIO_Init+0x334>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800208e:	4b26      	ldr	r3, [pc, #152]	; (8002128 <HAL_GPIO_Init+0x334>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020b2:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <HAL_GPIO_Init+0x334>)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <HAL_GPIO_Init+0x334>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020dc:	4a12      	ldr	r2, [pc, #72]	; (8002128 <HAL_GPIO_Init+0x334>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3301      	adds	r3, #1
 80020e6:	61fb      	str	r3, [r7, #28]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	2b0f      	cmp	r3, #15
 80020ec:	f67f ae90 	bls.w	8001e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	3724      	adds	r7, #36	; 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	40013800 	.word	0x40013800
 8002108:	40020000 	.word	0x40020000
 800210c:	40020400 	.word	0x40020400
 8002110:	40020800 	.word	0x40020800
 8002114:	40020c00 	.word	0x40020c00
 8002118:	40021000 	.word	0x40021000
 800211c:	40021400 	.word	0x40021400
 8002120:	40021800 	.word	0x40021800
 8002124:	40021c00 	.word	0x40021c00
 8002128:	40013c00 	.word	0x40013c00

0800212c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]
 8002138:	4613      	mov	r3, r2
 800213a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800213c:	787b      	ldrb	r3, [r7, #1]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002142:	887a      	ldrh	r2, [r7, #2]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002148:	e003      	b.n	8002152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800214a:	887b      	ldrh	r3, [r7, #2]
 800214c:	041a      	lsls	r2, r3, #16
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	619a      	str	r2, [r3, #24]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800215e:	b480      	push	{r7}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	460b      	mov	r3, r1
 8002168:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002170:	887a      	ldrh	r2, [r7, #2]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4013      	ands	r3, r2
 8002176:	041a      	lsls	r2, r3, #16
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	43d9      	mvns	r1, r3
 800217c:	887b      	ldrh	r3, [r7, #2]
 800217e:	400b      	ands	r3, r1
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	619a      	str	r2, [r3, #24]
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e267      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d075      	beq.n	800229e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021b2:	4b88      	ldr	r3, [pc, #544]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d00c      	beq.n	80021d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021be:	4b85      	ldr	r3, [pc, #532]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d112      	bne.n	80021f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ca:	4b82      	ldr	r3, [pc, #520]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021d6:	d10b      	bne.n	80021f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d8:	4b7e      	ldr	r3, [pc, #504]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d05b      	beq.n	800229c <HAL_RCC_OscConfig+0x108>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d157      	bne.n	800229c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e242      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f8:	d106      	bne.n	8002208 <HAL_RCC_OscConfig+0x74>
 80021fa:	4b76      	ldr	r3, [pc, #472]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a75      	ldr	r2, [pc, #468]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e01d      	b.n	8002244 <HAL_RCC_OscConfig+0xb0>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0x98>
 8002212:	4b70      	ldr	r3, [pc, #448]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a6f      	ldr	r2, [pc, #444]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	4b6d      	ldr	r3, [pc, #436]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a6c      	ldr	r2, [pc, #432]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e00b      	b.n	8002244 <HAL_RCC_OscConfig+0xb0>
 800222c:	4b69      	ldr	r3, [pc, #420]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a68      	ldr	r2, [pc, #416]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	4b66      	ldr	r3, [pc, #408]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a65      	ldr	r2, [pc, #404]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 800223e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d013      	beq.n	8002274 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7ff fcbc 	bl	8001bc8 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002254:	f7ff fcb8 	bl	8001bc8 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	; 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e207      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	4b5b      	ldr	r3, [pc, #364]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0xc0>
 8002272:	e014      	b.n	800229e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff fca8 	bl	8001bc8 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800227c:	f7ff fca4 	bl	8001bc8 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	; 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e1f3      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	4b51      	ldr	r3, [pc, #324]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0xe8>
 800229a:	e000      	b.n	800229e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d063      	beq.n	8002372 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022aa:	4b4a      	ldr	r3, [pc, #296]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00b      	beq.n	80022ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022b6:	4b47      	ldr	r3, [pc, #284]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d11c      	bne.n	80022fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022c2:	4b44      	ldr	r3, [pc, #272]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d116      	bne.n	80022fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ce:	4b41      	ldr	r3, [pc, #260]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d005      	beq.n	80022e6 <HAL_RCC_OscConfig+0x152>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e1c7      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e6:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4937      	ldr	r1, [pc, #220]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fa:	e03a      	b.n	8002372 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d020      	beq.n	8002346 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002304:	4b34      	ldr	r3, [pc, #208]	; (80023d8 <HAL_RCC_OscConfig+0x244>)
 8002306:	2201      	movs	r2, #1
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230a:	f7ff fc5d 	bl	8001bc8 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002312:	f7ff fc59 	bl	8001bc8 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e1a8      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002324:	4b2b      	ldr	r3, [pc, #172]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002330:	4b28      	ldr	r3, [pc, #160]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4925      	ldr	r1, [pc, #148]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002340:	4313      	orrs	r3, r2
 8002342:	600b      	str	r3, [r1, #0]
 8002344:	e015      	b.n	8002372 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002346:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <HAL_RCC_OscConfig+0x244>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7ff fc3c 	bl	8001bc8 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002354:	f7ff fc38 	bl	8001bc8 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e187      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002366:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d036      	beq.n	80023ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d016      	beq.n	80023b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <HAL_RCC_OscConfig+0x248>)
 8002388:	2201      	movs	r2, #1
 800238a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238c:	f7ff fc1c 	bl	8001bc8 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002394:	f7ff fc18 	bl	8001bc8 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e167      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a6:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCC_OscConfig+0x240>)
 80023a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x200>
 80023b2:	e01b      	b.n	80023ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_RCC_OscConfig+0x248>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ba:	f7ff fc05 	bl	8001bc8 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c0:	e00e      	b.n	80023e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c2:	f7ff fc01 	bl	8001bc8 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d907      	bls.n	80023e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e150      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
 80023d4:	40023800 	.word	0x40023800
 80023d8:	42470000 	.word	0x42470000
 80023dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e0:	4b88      	ldr	r3, [pc, #544]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 80023e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1ea      	bne.n	80023c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 8097 	beq.w	8002528 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023fa:	2300      	movs	r3, #0
 80023fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fe:	4b81      	ldr	r3, [pc, #516]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10f      	bne.n	800242a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	4b7d      	ldr	r3, [pc, #500]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4a7c      	ldr	r2, [pc, #496]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002418:	6413      	str	r3, [r2, #64]	; 0x40
 800241a:	4b7a      	ldr	r3, [pc, #488]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002426:	2301      	movs	r3, #1
 8002428:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242a:	4b77      	ldr	r3, [pc, #476]	; (8002608 <HAL_RCC_OscConfig+0x474>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002432:	2b00      	cmp	r3, #0
 8002434:	d118      	bne.n	8002468 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002436:	4b74      	ldr	r3, [pc, #464]	; (8002608 <HAL_RCC_OscConfig+0x474>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a73      	ldr	r2, [pc, #460]	; (8002608 <HAL_RCC_OscConfig+0x474>)
 800243c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002442:	f7ff fbc1 	bl	8001bc8 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244a:	f7ff fbbd 	bl	8001bc8 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e10c      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245c:	4b6a      	ldr	r3, [pc, #424]	; (8002608 <HAL_RCC_OscConfig+0x474>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d106      	bne.n	800247e <HAL_RCC_OscConfig+0x2ea>
 8002470:	4b64      	ldr	r3, [pc, #400]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002474:	4a63      	ldr	r2, [pc, #396]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6713      	str	r3, [r2, #112]	; 0x70
 800247c:	e01c      	b.n	80024b8 <HAL_RCC_OscConfig+0x324>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b05      	cmp	r3, #5
 8002484:	d10c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x30c>
 8002486:	4b5f      	ldr	r3, [pc, #380]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248a:	4a5e      	ldr	r2, [pc, #376]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 800248c:	f043 0304 	orr.w	r3, r3, #4
 8002490:	6713      	str	r3, [r2, #112]	; 0x70
 8002492:	4b5c      	ldr	r3, [pc, #368]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	4a5b      	ldr	r2, [pc, #364]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6713      	str	r3, [r2, #112]	; 0x70
 800249e:	e00b      	b.n	80024b8 <HAL_RCC_OscConfig+0x324>
 80024a0:	4b58      	ldr	r3, [pc, #352]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a4:	4a57      	ldr	r2, [pc, #348]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 80024a6:	f023 0301 	bic.w	r3, r3, #1
 80024aa:	6713      	str	r3, [r2, #112]	; 0x70
 80024ac:	4b55      	ldr	r3, [pc, #340]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	4a54      	ldr	r2, [pc, #336]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 80024b2:	f023 0304 	bic.w	r3, r3, #4
 80024b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d015      	beq.n	80024ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c0:	f7ff fb82 	bl	8001bc8 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c6:	e00a      	b.n	80024de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c8:	f7ff fb7e 	bl	8001bc8 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e0cb      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024de:	4b49      	ldr	r3, [pc, #292]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 80024e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0ee      	beq.n	80024c8 <HAL_RCC_OscConfig+0x334>
 80024ea:	e014      	b.n	8002516 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ec:	f7ff fb6c 	bl	8001bc8 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f2:	e00a      	b.n	800250a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f4:	f7ff fb68 	bl	8001bc8 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002502:	4293      	cmp	r3, r2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e0b5      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800250a:	4b3e      	ldr	r3, [pc, #248]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 800250c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1ee      	bne.n	80024f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002516:	7dfb      	ldrb	r3, [r7, #23]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d105      	bne.n	8002528 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251c:	4b39      	ldr	r3, [pc, #228]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	4a38      	ldr	r2, [pc, #224]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002526:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80a1 	beq.w	8002674 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002532:	4b34      	ldr	r3, [pc, #208]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b08      	cmp	r3, #8
 800253c:	d05c      	beq.n	80025f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d141      	bne.n	80025ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002546:	4b31      	ldr	r3, [pc, #196]	; (800260c <HAL_RCC_OscConfig+0x478>)
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7ff fb3c 	bl	8001bc8 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002554:	f7ff fb38 	bl	8001bc8 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e087      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002566:	4b27      	ldr	r3, [pc, #156]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69da      	ldr	r2, [r3, #28]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	019b      	lsls	r3, r3, #6
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	085b      	lsrs	r3, r3, #1
 800258a:	3b01      	subs	r3, #1
 800258c:	041b      	lsls	r3, r3, #16
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002594:	061b      	lsls	r3, r3, #24
 8002596:	491b      	ldr	r1, [pc, #108]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800259c:	4b1b      	ldr	r3, [pc, #108]	; (800260c <HAL_RCC_OscConfig+0x478>)
 800259e:	2201      	movs	r2, #1
 80025a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a2:	f7ff fb11 	bl	8001bc8 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025aa:	f7ff fb0d 	bl	8001bc8 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e05c      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025bc:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x416>
 80025c8:	e054      	b.n	8002674 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <HAL_RCC_OscConfig+0x478>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7ff fafa 	bl	8001bc8 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d8:	f7ff faf6 	bl	8001bc8 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e045      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_RCC_OscConfig+0x470>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x444>
 80025f6:	e03d      	b.n	8002674 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d107      	bne.n	8002610 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e038      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
 8002604:	40023800 	.word	0x40023800
 8002608:	40007000 	.word	0x40007000
 800260c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_RCC_OscConfig+0x4ec>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d028      	beq.n	8002670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002628:	429a      	cmp	r2, r3
 800262a:	d121      	bne.n	8002670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d11a      	bne.n	8002670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002640:	4013      	ands	r3, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002646:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002648:	4293      	cmp	r3, r2
 800264a:	d111      	bne.n	8002670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002656:	085b      	lsrs	r3, r3, #1
 8002658:	3b01      	subs	r3, #1
 800265a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d107      	bne.n	8002670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800

08002684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0cc      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002698:	4b68      	ldr	r3, [pc, #416]	; (800283c <HAL_RCC_ClockConfig+0x1b8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d90c      	bls.n	80026c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	4b65      	ldr	r3, [pc, #404]	; (800283c <HAL_RCC_ClockConfig+0x1b8>)
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ae:	4b63      	ldr	r3, [pc, #396]	; (800283c <HAL_RCC_ClockConfig+0x1b8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0b8      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d020      	beq.n	800270e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d8:	4b59      	ldr	r3, [pc, #356]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4a58      	ldr	r2, [pc, #352]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f0:	4b53      	ldr	r3, [pc, #332]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	4a52      	ldr	r2, [pc, #328]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026fc:	4b50      	ldr	r3, [pc, #320]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	494d      	ldr	r1, [pc, #308]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d044      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d107      	bne.n	8002732 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	4b47      	ldr	r3, [pc, #284]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d119      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e07f      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d003      	beq.n	8002742 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800273e:	2b03      	cmp	r3, #3
 8002740:	d107      	bne.n	8002752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002742:	4b3f      	ldr	r3, [pc, #252]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d109      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e06f      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002752:	4b3b      	ldr	r3, [pc, #236]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e067      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002762:	4b37      	ldr	r3, [pc, #220]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f023 0203 	bic.w	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4934      	ldr	r1, [pc, #208]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	4313      	orrs	r3, r2
 8002772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002774:	f7ff fa28 	bl	8001bc8 <HAL_GetTick>
 8002778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277a:	e00a      	b.n	8002792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800277c:	f7ff fa24 	bl	8001bc8 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	; 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e04f      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002792:	4b2b      	ldr	r3, [pc, #172]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 020c 	and.w	r2, r3, #12
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d1eb      	bne.n	800277c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027a4:	4b25      	ldr	r3, [pc, #148]	; (800283c <HAL_RCC_ClockConfig+0x1b8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d20c      	bcs.n	80027cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	4b22      	ldr	r3, [pc, #136]	; (800283c <HAL_RCC_ClockConfig+0x1b8>)
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	4b20      	ldr	r3, [pc, #128]	; (800283c <HAL_RCC_ClockConfig+0x1b8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e032      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d8:	4b19      	ldr	r3, [pc, #100]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4916      	ldr	r1, [pc, #88]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027f6:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	490e      	ldr	r1, [pc, #56]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	4313      	orrs	r3, r2
 8002808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800280a:	f000 f821 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 800280e:	4602      	mov	r2, r0
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	490a      	ldr	r1, [pc, #40]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 800281c:	5ccb      	ldrb	r3, [r1, r3]
 800281e:	fa22 f303 	lsr.w	r3, r2, r3
 8002822:	4a09      	ldr	r2, [pc, #36]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff f988 	bl	8001b40 <HAL_InitTick>

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40023c00 	.word	0x40023c00
 8002840:	40023800 	.word	0x40023800
 8002844:	08003988 	.word	0x08003988
 8002848:	20000020 	.word	0x20000020
 800284c:	20000024 	.word	0x20000024

08002850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002854:	b090      	sub	sp, #64	; 0x40
 8002856:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
 800285c:	2300      	movs	r3, #0
 800285e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002860:	2300      	movs	r3, #0
 8002862:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002868:	4b59      	ldr	r3, [pc, #356]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	2b08      	cmp	r3, #8
 8002872:	d00d      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x40>
 8002874:	2b08      	cmp	r3, #8
 8002876:	f200 80a1 	bhi.w	80029bc <HAL_RCC_GetSysClockFreq+0x16c>
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x34>
 800287e:	2b04      	cmp	r3, #4
 8002880:	d003      	beq.n	800288a <HAL_RCC_GetSysClockFreq+0x3a>
 8002882:	e09b      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002884:	4b53      	ldr	r3, [pc, #332]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002886:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002888:	e09b      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800288a:	4b53      	ldr	r3, [pc, #332]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800288c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800288e:	e098      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002890:	4b4f      	ldr	r3, [pc, #316]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002898:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800289a:	4b4d      	ldr	r3, [pc, #308]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d028      	beq.n	80028f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a6:	4b4a      	ldr	r3, [pc, #296]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	099b      	lsrs	r3, r3, #6
 80028ac:	2200      	movs	r2, #0
 80028ae:	623b      	str	r3, [r7, #32]
 80028b0:	627a      	str	r2, [r7, #36]	; 0x24
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028b8:	2100      	movs	r1, #0
 80028ba:	4b47      	ldr	r3, [pc, #284]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80028bc:	fb03 f201 	mul.w	r2, r3, r1
 80028c0:	2300      	movs	r3, #0
 80028c2:	fb00 f303 	mul.w	r3, r0, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	4a43      	ldr	r2, [pc, #268]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80028ca:	fba0 1202 	umull	r1, r2, r0, r2
 80028ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028d0:	460a      	mov	r2, r1
 80028d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80028d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028d6:	4413      	add	r3, r2
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028dc:	2200      	movs	r2, #0
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	61fa      	str	r2, [r7, #28]
 80028e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80028ea:	f7fe f999 	bl	8000c20 <__aeabi_uldivmod>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4613      	mov	r3, r2
 80028f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028f6:	e053      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f8:	4b35      	ldr	r3, [pc, #212]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	099b      	lsrs	r3, r3, #6
 80028fe:	2200      	movs	r2, #0
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	617a      	str	r2, [r7, #20]
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800290a:	f04f 0b00 	mov.w	fp, #0
 800290e:	4652      	mov	r2, sl
 8002910:	465b      	mov	r3, fp
 8002912:	f04f 0000 	mov.w	r0, #0
 8002916:	f04f 0100 	mov.w	r1, #0
 800291a:	0159      	lsls	r1, r3, #5
 800291c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002920:	0150      	lsls	r0, r2, #5
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	ebb2 080a 	subs.w	r8, r2, sl
 800292a:	eb63 090b 	sbc.w	r9, r3, fp
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800293a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800293e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002942:	ebb2 0408 	subs.w	r4, r2, r8
 8002946:	eb63 0509 	sbc.w	r5, r3, r9
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	00eb      	lsls	r3, r5, #3
 8002954:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002958:	00e2      	lsls	r2, r4, #3
 800295a:	4614      	mov	r4, r2
 800295c:	461d      	mov	r5, r3
 800295e:	eb14 030a 	adds.w	r3, r4, sl
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	eb45 030b 	adc.w	r3, r5, fp
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002976:	4629      	mov	r1, r5
 8002978:	028b      	lsls	r3, r1, #10
 800297a:	4621      	mov	r1, r4
 800297c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002980:	4621      	mov	r1, r4
 8002982:	028a      	lsls	r2, r1, #10
 8002984:	4610      	mov	r0, r2
 8002986:	4619      	mov	r1, r3
 8002988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800298a:	2200      	movs	r2, #0
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	60fa      	str	r2, [r7, #12]
 8002990:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002994:	f7fe f944 	bl	8000c20 <__aeabi_uldivmod>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4613      	mov	r3, r2
 800299e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	3301      	adds	r3, #1
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80029b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029ba:	e002      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80029be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3740      	adds	r7, #64	; 0x40
 80029c8:	46bd      	mov	sp, r7
 80029ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800
 80029d4:	00f42400 	.word	0x00f42400
 80029d8:	017d7840 	.word	0x017d7840

080029dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e07b      	b.n	8002ae6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d108      	bne.n	8002a08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029fe:	d009      	beq.n	8002a14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	61da      	str	r2, [r3, #28]
 8002a06:	e005      	b.n	8002a14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe ff74 	bl	800191c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a98:	ea42 0103 	orr.w	r1, r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	0c1b      	lsrs	r3, r3, #16
 8002ab2:	f003 0104 	and.w	r1, r3, #4
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	f003 0210 	and.w	r2, r3, #16
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	69da      	ldr	r2, [r3, #28]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ad4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b088      	sub	sp, #32
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	603b      	str	r3, [r7, #0]
 8002afa:	4613      	mov	r3, r2
 8002afc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_SPI_Transmit+0x22>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e126      	b.n	8002d5e <HAL_SPI_Transmit+0x270>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b18:	f7ff f856 	bl	8001bc8 <HAL_GetTick>
 8002b1c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d002      	beq.n	8002b34 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b32:	e10b      	b.n	8002d4c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <HAL_SPI_Transmit+0x52>
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b44:	e102      	b.n	8002d4c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2203      	movs	r2, #3
 8002b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	88fa      	ldrh	r2, [r7, #6]
 8002b5e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	88fa      	ldrh	r2, [r7, #6]
 8002b64:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b8c:	d10f      	bne.n	8002bae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
 8002bba:	d007      	beq.n	8002bcc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bd4:	d14b      	bne.n	8002c6e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_SPI_Transmit+0xf6>
 8002bde:	8afb      	ldrh	r3, [r7, #22]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d13e      	bne.n	8002c62 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	881a      	ldrh	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	1c9a      	adds	r2, r3, #2
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c08:	e02b      	b.n	8002c62 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d112      	bne.n	8002c3e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	881a      	ldrh	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	1c9a      	adds	r2, r3, #2
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c3c:	e011      	b.n	8002c62 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c3e:	f7fe ffc3 	bl	8001bc8 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d803      	bhi.n	8002c56 <HAL_SPI_Transmit+0x168>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c54:	d102      	bne.n	8002c5c <HAL_SPI_Transmit+0x16e>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c60:	e074      	b.n	8002d4c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1ce      	bne.n	8002c0a <HAL_SPI_Transmit+0x11c>
 8002c6c:	e04c      	b.n	8002d08 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <HAL_SPI_Transmit+0x18e>
 8002c76:	8afb      	ldrh	r3, [r7, #22]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d140      	bne.n	8002cfe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	330c      	adds	r3, #12
 8002c86:	7812      	ldrb	r2, [r2, #0]
 8002c88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ca2:	e02c      	b.n	8002cfe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d113      	bne.n	8002cda <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	330c      	adds	r3, #12
 8002cbc:	7812      	ldrb	r2, [r2, #0]
 8002cbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	86da      	strh	r2, [r3, #54]	; 0x36
 8002cd8:	e011      	b.n	8002cfe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cda:	f7fe ff75 	bl	8001bc8 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d803      	bhi.n	8002cf2 <HAL_SPI_Transmit+0x204>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d102      	bne.n	8002cf8 <HAL_SPI_Transmit+0x20a>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d102      	bne.n	8002cfe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002cfc:	e026      	b.n	8002d4c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1cd      	bne.n	8002ca4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	6839      	ldr	r1, [r7, #0]
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fbcb 	bl	80034a8 <SPI_EndRxTxTransaction>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10a      	bne.n	8002d3c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	77fb      	strb	r3, [r7, #31]
 8002d48:	e000      	b.n	8002d4c <HAL_SPI_Transmit+0x25e>
  }

error:
 8002d4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3720      	adds	r7, #32
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b088      	sub	sp, #32
 8002d6a:	af02      	add	r7, sp, #8
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	603b      	str	r3, [r7, #0]
 8002d72:	4613      	mov	r3, r2
 8002d74:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d82:	d112      	bne.n	8002daa <HAL_SPI_Receive+0x44>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10e      	bne.n	8002daa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2204      	movs	r2, #4
 8002d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d94:	88fa      	ldrh	r2, [r7, #6]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	68b9      	ldr	r1, [r7, #8]
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f8f1 	bl	8002f88 <HAL_SPI_TransmitReceive>
 8002da6:	4603      	mov	r3, r0
 8002da8:	e0ea      	b.n	8002f80 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_SPI_Receive+0x52>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e0e3      	b.n	8002f80 <HAL_SPI_Receive+0x21a>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dc0:	f7fe ff02 	bl	8001bc8 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d002      	beq.n	8002dd8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002dd6:	e0ca      	b.n	8002f6e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <HAL_SPI_Receive+0x7e>
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d102      	bne.n	8002dea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002de8:	e0c1      	b.n	8002f6e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2204      	movs	r2, #4
 8002dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	88fa      	ldrh	r2, [r7, #6]
 8002e02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	88fa      	ldrh	r2, [r7, #6]
 8002e08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e30:	d10f      	bne.n	8002e52 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e50:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5c:	2b40      	cmp	r3, #64	; 0x40
 8002e5e:	d007      	beq.n	8002e70 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e6e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d162      	bne.n	8002f3e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e78:	e02e      	b.n	8002ed8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d115      	bne.n	8002eb4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f103 020c 	add.w	r2, r3, #12
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	7812      	ldrb	r2, [r2, #0]
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002eb2:	e011      	b.n	8002ed8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eb4:	f7fe fe88 	bl	8001bc8 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d803      	bhi.n	8002ecc <HAL_SPI_Receive+0x166>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eca:	d102      	bne.n	8002ed2 <HAL_SPI_Receive+0x16c>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d102      	bne.n	8002ed8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ed6:	e04a      	b.n	8002f6e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1cb      	bne.n	8002e7a <HAL_SPI_Receive+0x114>
 8002ee2:	e031      	b.n	8002f48 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d113      	bne.n	8002f1a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	b292      	uxth	r2, r2
 8002efe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	1c9a      	adds	r2, r3, #2
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f18:	e011      	b.n	8002f3e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f1a:	f7fe fe55 	bl	8001bc8 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d803      	bhi.n	8002f32 <HAL_SPI_Receive+0x1cc>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f30:	d102      	bne.n	8002f38 <HAL_SPI_Receive+0x1d2>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d102      	bne.n	8002f3e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f3c:	e017      	b.n	8002f6e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1cd      	bne.n	8002ee4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	6839      	ldr	r1, [r7, #0]
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 fa45 	bl	80033dc <SPI_EndRxTransaction>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	75fb      	strb	r3, [r7, #23]
 8002f6a:	e000      	b.n	8002f6e <HAL_SPI_Receive+0x208>
  }

error :
 8002f6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08c      	sub	sp, #48	; 0x30
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f96:	2301      	movs	r3, #1
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_SPI_TransmitReceive+0x26>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e18a      	b.n	80032c4 <HAL_SPI_TransmitReceive+0x33c>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fb6:	f7fe fe07 	bl	8001bc8 <HAL_GetTick>
 8002fba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002fcc:	887b      	ldrh	r3, [r7, #2]
 8002fce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d00f      	beq.n	8002ff8 <HAL_SPI_TransmitReceive+0x70>
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fde:	d107      	bne.n	8002ff0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d103      	bne.n	8002ff0 <HAL_SPI_TransmitReceive+0x68>
 8002fe8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d003      	beq.n	8002ff8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ff6:	e15b      	b.n	80032b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d005      	beq.n	800300a <HAL_SPI_TransmitReceive+0x82>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <HAL_SPI_TransmitReceive+0x82>
 8003004:	887b      	ldrh	r3, [r7, #2]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d103      	bne.n	8003012 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003010:	e14e      	b.n	80032b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b04      	cmp	r3, #4
 800301c:	d003      	beq.n	8003026 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2205      	movs	r2, #5
 8003022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	887a      	ldrh	r2, [r7, #2]
 8003036:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	887a      	ldrh	r2, [r7, #2]
 800303c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	887a      	ldrh	r2, [r7, #2]
 8003048:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	887a      	ldrh	r2, [r7, #2]
 800304e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b40      	cmp	r3, #64	; 0x40
 8003068:	d007      	beq.n	800307a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003078:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003082:	d178      	bne.n	8003176 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <HAL_SPI_TransmitReceive+0x10a>
 800308c:	8b7b      	ldrh	r3, [r7, #26]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d166      	bne.n	8003160 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	881a      	ldrh	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	1c9a      	adds	r2, r3, #2
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030b6:	e053      	b.n	8003160 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d11b      	bne.n	80030fe <HAL_SPI_TransmitReceive+0x176>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d016      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x176>
 80030d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d113      	bne.n	80030fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	881a      	ldrh	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	1c9a      	adds	r2, r3, #2
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b01      	cmp	r3, #1
 800310a:	d119      	bne.n	8003140 <HAL_SPI_TransmitReceive+0x1b8>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d014      	beq.n	8003140 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003120:	b292      	uxth	r2, r2
 8003122:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	1c9a      	adds	r2, r3, #2
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800313c:	2301      	movs	r3, #1
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003140:	f7fe fd42 	bl	8001bc8 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800314c:	429a      	cmp	r2, r3
 800314e:	d807      	bhi.n	8003160 <HAL_SPI_TransmitReceive+0x1d8>
 8003150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003156:	d003      	beq.n	8003160 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800315e:	e0a7      	b.n	80032b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1a6      	bne.n	80030b8 <HAL_SPI_TransmitReceive+0x130>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1a1      	bne.n	80030b8 <HAL_SPI_TransmitReceive+0x130>
 8003174:	e07c      	b.n	8003270 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <HAL_SPI_TransmitReceive+0x1fc>
 800317e:	8b7b      	ldrh	r3, [r7, #26]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d16b      	bne.n	800325c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	330c      	adds	r3, #12
 800318e:	7812      	ldrb	r2, [r2, #0]
 8003190:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031aa:	e057      	b.n	800325c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d11c      	bne.n	80031f4 <HAL_SPI_TransmitReceive+0x26c>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d017      	beq.n	80031f4 <HAL_SPI_TransmitReceive+0x26c>
 80031c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d114      	bne.n	80031f4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	330c      	adds	r3, #12
 80031d4:	7812      	ldrb	r2, [r2, #0]
 80031d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d119      	bne.n	8003236 <HAL_SPI_TransmitReceive+0x2ae>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d014      	beq.n	8003236 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003232:	2301      	movs	r3, #1
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003236:	f7fe fcc7 	bl	8001bc8 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003242:	429a      	cmp	r2, r3
 8003244:	d803      	bhi.n	800324e <HAL_SPI_TransmitReceive+0x2c6>
 8003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324c:	d102      	bne.n	8003254 <HAL_SPI_TransmitReceive+0x2cc>
 800324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003250:	2b00      	cmp	r3, #0
 8003252:	d103      	bne.n	800325c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800325a:	e029      	b.n	80032b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1a2      	bne.n	80031ac <HAL_SPI_TransmitReceive+0x224>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d19d      	bne.n	80031ac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003272:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 f917 	bl	80034a8 <SPI_EndRxTxTransaction>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d006      	beq.n	800328e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2220      	movs	r2, #32
 800328a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800328c:	e010      	b.n	80032b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10b      	bne.n	80032ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	e000      	b.n	80032b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80032ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3730      	adds	r7, #48	; 0x30
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032dc:	f7fe fc74 	bl	8001bc8 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	4413      	add	r3, r2
 80032ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032ec:	f7fe fc6c 	bl	8001bc8 <HAL_GetTick>
 80032f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032f2:	4b39      	ldr	r3, [pc, #228]	; (80033d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	015b      	lsls	r3, r3, #5
 80032f8:	0d1b      	lsrs	r3, r3, #20
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	fb02 f303 	mul.w	r3, r2, r3
 8003300:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003302:	e054      	b.n	80033ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330a:	d050      	beq.n	80033ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800330c:	f7fe fc5c 	bl	8001bc8 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	429a      	cmp	r2, r3
 800331a:	d902      	bls.n	8003322 <SPI_WaitFlagStateUntilTimeout+0x56>
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d13d      	bne.n	800339e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003330:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800333a:	d111      	bne.n	8003360 <SPI_WaitFlagStateUntilTimeout+0x94>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003344:	d004      	beq.n	8003350 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334e:	d107      	bne.n	8003360 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800335e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003368:	d10f      	bne.n	800338a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003388:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e017      	b.n	80033ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4013      	ands	r3, r2
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	bf0c      	ite	eq
 80033be:	2301      	moveq	r3, #1
 80033c0:	2300      	movne	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d19b      	bne.n	8003304 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000020 	.word	0x20000020

080033dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033f0:	d111      	bne.n	8003416 <SPI_EndRxTransaction+0x3a>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033fa:	d004      	beq.n	8003406 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003404:	d107      	bne.n	8003416 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003414:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341e:	d12a      	bne.n	8003476 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003428:	d012      	beq.n	8003450 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2200      	movs	r2, #0
 8003432:	2180      	movs	r1, #128	; 0x80
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f7ff ff49 	bl	80032cc <SPI_WaitFlagStateUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d02d      	beq.n	800349c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	f043 0220 	orr.w	r2, r3, #32
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e026      	b.n	800349e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2200      	movs	r2, #0
 8003458:	2101      	movs	r1, #1
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f7ff ff36 	bl	80032cc <SPI_WaitFlagStateUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d01a      	beq.n	800349c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346a:	f043 0220 	orr.w	r2, r3, #32
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e013      	b.n	800349e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2200      	movs	r2, #0
 800347e:	2101      	movs	r1, #1
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff ff23 	bl	80032cc <SPI_WaitFlagStateUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e000      	b.n	800349e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80034b4:	4b1b      	ldr	r3, [pc, #108]	; (8003524 <SPI_EndRxTxTransaction+0x7c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1b      	ldr	r2, [pc, #108]	; (8003528 <SPI_EndRxTxTransaction+0x80>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	0d5b      	lsrs	r3, r3, #21
 80034c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034c4:	fb02 f303 	mul.w	r3, r2, r3
 80034c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034d2:	d112      	bne.n	80034fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2200      	movs	r2, #0
 80034dc:	2180      	movs	r1, #128	; 0x80
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f7ff fef4 	bl	80032cc <SPI_WaitFlagStateUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d016      	beq.n	8003518 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ee:	f043 0220 	orr.w	r2, r3, #32
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e00f      	b.n	800351a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	3b01      	subs	r3, #1
 8003504:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003510:	2b80      	cmp	r3, #128	; 0x80
 8003512:	d0f2      	beq.n	80034fa <SPI_EndRxTxTransaction+0x52>
 8003514:	e000      	b.n	8003518 <SPI_EndRxTxTransaction+0x70>
        break;
 8003516:	bf00      	nop
  }

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000020 	.word	0x20000020
 8003528:	165e9f81 	.word	0x165e9f81

0800352c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e041      	b.n	80035c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fe fa4a 	bl	80019ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3304      	adds	r3, #4
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f000 f896 	bl	800369c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d001      	beq.n	80035e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e046      	b.n	8003672 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a23      	ldr	r2, [pc, #140]	; (8003680 <HAL_TIM_Base_Start+0xb4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d022      	beq.n	800363c <HAL_TIM_Base_Start+0x70>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fe:	d01d      	beq.n	800363c <HAL_TIM_Base_Start+0x70>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1f      	ldr	r2, [pc, #124]	; (8003684 <HAL_TIM_Base_Start+0xb8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d018      	beq.n	800363c <HAL_TIM_Base_Start+0x70>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1e      	ldr	r2, [pc, #120]	; (8003688 <HAL_TIM_Base_Start+0xbc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d013      	beq.n	800363c <HAL_TIM_Base_Start+0x70>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a1c      	ldr	r2, [pc, #112]	; (800368c <HAL_TIM_Base_Start+0xc0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00e      	beq.n	800363c <HAL_TIM_Base_Start+0x70>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a1b      	ldr	r2, [pc, #108]	; (8003690 <HAL_TIM_Base_Start+0xc4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d009      	beq.n	800363c <HAL_TIM_Base_Start+0x70>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a19      	ldr	r2, [pc, #100]	; (8003694 <HAL_TIM_Base_Start+0xc8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d004      	beq.n	800363c <HAL_TIM_Base_Start+0x70>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a18      	ldr	r2, [pc, #96]	; (8003698 <HAL_TIM_Base_Start+0xcc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d111      	bne.n	8003660 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b06      	cmp	r3, #6
 800364c:	d010      	beq.n	8003670 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0201 	orr.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365e:	e007      	b.n	8003670 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40010000 	.word	0x40010000
 8003684:	40000400 	.word	0x40000400
 8003688:	40000800 	.word	0x40000800
 800368c:	40000c00 	.word	0x40000c00
 8003690:	40010400 	.word	0x40010400
 8003694:	40014000 	.word	0x40014000
 8003698:	40001800 	.word	0x40001800

0800369c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a40      	ldr	r2, [pc, #256]	; (80037b0 <TIM_Base_SetConfig+0x114>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d013      	beq.n	80036dc <TIM_Base_SetConfig+0x40>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ba:	d00f      	beq.n	80036dc <TIM_Base_SetConfig+0x40>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a3d      	ldr	r2, [pc, #244]	; (80037b4 <TIM_Base_SetConfig+0x118>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d00b      	beq.n	80036dc <TIM_Base_SetConfig+0x40>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a3c      	ldr	r2, [pc, #240]	; (80037b8 <TIM_Base_SetConfig+0x11c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d007      	beq.n	80036dc <TIM_Base_SetConfig+0x40>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a3b      	ldr	r2, [pc, #236]	; (80037bc <TIM_Base_SetConfig+0x120>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d003      	beq.n	80036dc <TIM_Base_SetConfig+0x40>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a3a      	ldr	r2, [pc, #232]	; (80037c0 <TIM_Base_SetConfig+0x124>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d108      	bne.n	80036ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a2f      	ldr	r2, [pc, #188]	; (80037b0 <TIM_Base_SetConfig+0x114>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d02b      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fc:	d027      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a2c      	ldr	r2, [pc, #176]	; (80037b4 <TIM_Base_SetConfig+0x118>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d023      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a2b      	ldr	r2, [pc, #172]	; (80037b8 <TIM_Base_SetConfig+0x11c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d01f      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a2a      	ldr	r2, [pc, #168]	; (80037bc <TIM_Base_SetConfig+0x120>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d01b      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a29      	ldr	r2, [pc, #164]	; (80037c0 <TIM_Base_SetConfig+0x124>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d017      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a28      	ldr	r2, [pc, #160]	; (80037c4 <TIM_Base_SetConfig+0x128>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d013      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a27      	ldr	r2, [pc, #156]	; (80037c8 <TIM_Base_SetConfig+0x12c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00f      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a26      	ldr	r2, [pc, #152]	; (80037cc <TIM_Base_SetConfig+0x130>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00b      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a25      	ldr	r2, [pc, #148]	; (80037d0 <TIM_Base_SetConfig+0x134>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d007      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a24      	ldr	r2, [pc, #144]	; (80037d4 <TIM_Base_SetConfig+0x138>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d003      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a23      	ldr	r2, [pc, #140]	; (80037d8 <TIM_Base_SetConfig+0x13c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d108      	bne.n	8003760 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	4313      	orrs	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <TIM_Base_SetConfig+0x114>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d003      	beq.n	8003794 <TIM_Base_SetConfig+0xf8>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a0c      	ldr	r2, [pc, #48]	; (80037c0 <TIM_Base_SetConfig+0x124>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d103      	bne.n	800379c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	615a      	str	r2, [r3, #20]
}
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40010000 	.word	0x40010000
 80037b4:	40000400 	.word	0x40000400
 80037b8:	40000800 	.word	0x40000800
 80037bc:	40000c00 	.word	0x40000c00
 80037c0:	40010400 	.word	0x40010400
 80037c4:	40014000 	.word	0x40014000
 80037c8:	40014400 	.word	0x40014400
 80037cc:	40014800 	.word	0x40014800
 80037d0:	40001800 	.word	0x40001800
 80037d4:	40001c00 	.word	0x40001c00
 80037d8:	40002000 	.word	0x40002000

080037dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e05a      	b.n	80038aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a21      	ldr	r2, [pc, #132]	; (80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d022      	beq.n	800387e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003840:	d01d      	beq.n	800387e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1d      	ldr	r2, [pc, #116]	; (80038bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d018      	beq.n	800387e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1b      	ldr	r2, [pc, #108]	; (80038c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d013      	beq.n	800387e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1a      	ldr	r2, [pc, #104]	; (80038c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d00e      	beq.n	800387e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a18      	ldr	r2, [pc, #96]	; (80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d009      	beq.n	800387e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a17      	ldr	r2, [pc, #92]	; (80038cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d004      	beq.n	800387e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a15      	ldr	r2, [pc, #84]	; (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d10c      	bne.n	8003898 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	4313      	orrs	r3, r2
 800388e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40010000 	.word	0x40010000
 80038bc:	40000400 	.word	0x40000400
 80038c0:	40000800 	.word	0x40000800
 80038c4:	40000c00 	.word	0x40000c00
 80038c8:	40010400 	.word	0x40010400
 80038cc:	40014000 	.word	0x40014000
 80038d0:	40001800 	.word	0x40001800

080038d4 <__libc_init_array>:
 80038d4:	b570      	push	{r4, r5, r6, lr}
 80038d6:	4d0d      	ldr	r5, [pc, #52]	; (800390c <__libc_init_array+0x38>)
 80038d8:	4c0d      	ldr	r4, [pc, #52]	; (8003910 <__libc_init_array+0x3c>)
 80038da:	1b64      	subs	r4, r4, r5
 80038dc:	10a4      	asrs	r4, r4, #2
 80038de:	2600      	movs	r6, #0
 80038e0:	42a6      	cmp	r6, r4
 80038e2:	d109      	bne.n	80038f8 <__libc_init_array+0x24>
 80038e4:	4d0b      	ldr	r5, [pc, #44]	; (8003914 <__libc_init_array+0x40>)
 80038e6:	4c0c      	ldr	r4, [pc, #48]	; (8003918 <__libc_init_array+0x44>)
 80038e8:	f000 f820 	bl	800392c <_init>
 80038ec:	1b64      	subs	r4, r4, r5
 80038ee:	10a4      	asrs	r4, r4, #2
 80038f0:	2600      	movs	r6, #0
 80038f2:	42a6      	cmp	r6, r4
 80038f4:	d105      	bne.n	8003902 <__libc_init_array+0x2e>
 80038f6:	bd70      	pop	{r4, r5, r6, pc}
 80038f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038fc:	4798      	blx	r3
 80038fe:	3601      	adds	r6, #1
 8003900:	e7ee      	b.n	80038e0 <__libc_init_array+0xc>
 8003902:	f855 3b04 	ldr.w	r3, [r5], #4
 8003906:	4798      	blx	r3
 8003908:	3601      	adds	r6, #1
 800390a:	e7f2      	b.n	80038f2 <__libc_init_array+0x1e>
 800390c:	080039a0 	.word	0x080039a0
 8003910:	080039a0 	.word	0x080039a0
 8003914:	080039a0 	.word	0x080039a0
 8003918:	080039a4 	.word	0x080039a4

0800391c <memset>:
 800391c:	4402      	add	r2, r0
 800391e:	4603      	mov	r3, r0
 8003920:	4293      	cmp	r3, r2
 8003922:	d100      	bne.n	8003926 <memset+0xa>
 8003924:	4770      	bx	lr
 8003926:	f803 1b01 	strb.w	r1, [r3], #1
 800392a:	e7f9      	b.n	8003920 <memset+0x4>

0800392c <_init>:
 800392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392e:	bf00      	nop
 8003930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003932:	bc08      	pop	{r3}
 8003934:	469e      	mov	lr, r3
 8003936:	4770      	bx	lr

08003938 <_fini>:
 8003938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393a:	bf00      	nop
 800393c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800393e:	bc08      	pop	{r3}
 8003940:	469e      	mov	lr, r3
 8003942:	4770      	bx	lr
